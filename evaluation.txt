Downloading dataset...
Dataset downloaded to: /kaggle/input/chest-ctscan-images
Using dataset path: /kaggle/input/chest-ctscan-images/Data
Loading data...
Loaded 1000 images
Class distribution: [218 136 215 170 120  51  90]
Class names: ['adenocarcinoma_left.lower.lobe_T2_N0_M0_Ib', 'large.cell.carcinoma_left.hilum_T2_N2_M0_IIIa', 'normal', 'squamous.cell.carcinoma_left.hilum_T1_N2_M0_IIIa', 'adenocarcinoma', 'large.cell.carcinoma', 'squamous.cell.carcinoma']
Limited to top 4 classes: ['large.cell.carcinoma_left.hilum_T2_N2_M0_IIIa', 'squamous.cell.carcinoma_left.hilum_T1_N2_M0_IIIa', 'normal', 'adenocarcinoma_left.lower.lobe_T2_N0_M0_Ib']
Class distribution: {'large.cell.carcinoma_left.hilum_T2_N2_M0_IIIa': np.int64(136), 'squamous.cell.carcinoma_left.hilum_T1_N2_M0_IIIa': np.int64(170), 'normal': np.int64(215), 'adenocarcinoma_left.lower.lobe_T2_N0_M0_Ib': np.int64(218)}
EXTREME class weights: {0: np.float64(2.3364143771447634), 1: np.float64(1.3374416309513018), 2: np.float64(0.7435342715405091), 3: np.float64(0.7182173743792611)}
Train: 472, Val: 119, Test: 148
Train distribution: [ 87 109 137 139]
Val distribution: [22 27 35 35]
Test distribution: [27 34 43 44]

============================================================
Training model 1/3 with mega_smote sampling
Model type: standard
============================================================
Sampling failed: With over-sampling methods, the number of samples in a class should be greater or equal to the original number of samples. Originally, there is 137 samples and 111 samples are asked., using original data
After mega_smote: 472 samples
New distribution: [ 87 109 137 139]
Created enhanced densenet model with attention=True
Stage 1: Fully balanced training...
Epoch 1/25
36/37 ━━━━━━━━━━━━━━━━━━━━ 0s 51ms/step - accuracy: 0.3045 - auc: 0.5244 - loss: 7.1702 - weighted_f1: 0.3043WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
37/37 ━━━━━━━━━━━━━━━━━━━━ 62s 414ms/step - accuracy: 0.3049 - auc: 0.5263 - loss: 7.1508 - weighted_f1: 0.3046 - val_accuracy: 0.4821 - val_auc: 0.8016 - val_loss: 4.8003 - val_weighted_f1: 0.4769 - learning_rate: 3.0000e-04
Epoch 2/25
37/37 ━━━━━━━━━━━━━━━━━━━━ 0s 48ms/step - accuracy: 0.3648 - auc: 0.6140 - loss: 6.1415 - weighted_f1: 0.3613WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
37/37 ━━━━━━━━━━━━━━━━━━━━ 3s 80ms/step - accuracy: 0.3649 - auc: 0.6142 - loss: 6.1373 - weighted_f1: 0.3615 - val_accuracy: 0.5357 - val_auc: 0.8364 - val_loss: 4.3425 - val_weighted_f1: 0.5266 - learning_rate: 3.0000e-04
Epoch 3/25
37/37 ━━━━━━━━━━━━━━━━━━━━ 0s 48ms/step - accuracy: 0.3791 - auc: 0.6405 - loss: 5.6741 - weighted_f1: 0.3729WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
37/37 ━━━━━━━━━━━━━━━━━━━━ 3s 82ms/step - accuracy: 0.3802 - auc: 0.6414 - loss: 5.6599 - weighted_f1: 0.3739 - val_accuracy: 0.5804 - val_auc: 0.8536 - val_loss: 3.9382 - val_weighted_f1: 0.5604 - learning_rate: 3.0000e-04
Epoch 4/25
37/37 ━━━━━━━━━━━━━━━━━━━━ 0s 50ms/step - accuracy: 0.4454 - auc: 0.6904 - loss: 4.8012 - weighted_f1: 0.4335WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
37/37 ━━━━━━━━━━━━━━━━━━━━ 3s 84ms/step - accuracy: 0.4458 - auc: 0.6911 - loss: 4.7964 - weighted_f1: 0.4340 - val_accuracy: 0.6161 - val_auc: 0.8579 - val_loss: 3.6275 - val_weighted_f1: 0.5829 - learning_rate: 3.0000e-04
Epoch 5/25
37/37 ━━━━━━━━━━━━━━━━━━━━ 2s 51ms/step - accuracy: 0.4531 - auc: 0.7255 - loss: 4.4327 - weighted_f1: 0.4414 - val_accuracy: 0.5982 - val_auc: 0.8571 - val_loss: 3.4974 - val_weighted_f1: 0.5646 - learning_rate: 3.0000e-04
Epoch 6/25
37/37 ━━━━━━━━━━━━━━━━━━━━ 2s 58ms/step - accuracy: 0.5236 - auc: 0.7609 - loss: 4.1640 - weighted_f1: 0.5111 - val_accuracy: 0.5625 - val_auc: 0.8586 - val_loss: 3.3101 - val_weighted_f1: 0.4877 - learning_rate: 3.0000e-04
Epoch 7/25
37/37 ━━━━━━━━━━━━━━━━━━━━ 2s 54ms/step - accuracy: 0.4878 - auc: 0.7604 - loss: 3.9325 - weighted_f1: 0.4573 - val_accuracy: 0.5714 - val_auc: 0.8584 - val_loss: 3.2672 - val_weighted_f1: 0.4978 - learning_rate: 3.0000e-04
Epoch 8/25
37/37 ━━━━━━━━━━━━━━━━━━━━ 2s 56ms/step - accuracy: 0.5601 - auc: 0.7908 - loss: 3.8429 - weighted_f1: 0.5312 - val_accuracy: 0.6161 - val_auc: 0.8802 - val_loss: 3.1299 - val_weighted_f1: 0.5660 - learning_rate: 3.0000e-04
Epoch 9/25
37/37 ━━━━━━━━━━━━━━━━━━━━ 0s 49ms/step - accuracy: 0.4988 - auc: 0.7857 - loss: 3.7486 - weighted_f1: 0.4650WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
37/37 ━━━━━━━━━━━━━━━━━━━━ 3s 82ms/step - accuracy: 0.5008 - auc: 0.7867 - loss: 3.7421 - weighted_f1: 0.4670 - val_accuracy: 0.6339 - val_auc: 0.9078 - val_loss: 3.0297 - val_weighted_f1: 0.5856 - learning_rate: 3.0000e-04
Epoch 10/25
37/37 ━━━━━━━━━━━━━━━━━━━━ 0s 52ms/step - accuracy: 0.6215 - auc: 0.8635 - loss: 3.2766 - weighted_f1: 0.5856WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
37/37 ━━━━━━━━━━━━━━━━━━━━ 3s 84ms/step - accuracy: 0.6216 - auc: 0.8637 - loss: 3.2769 - weighted_f1: 0.5858 - val_accuracy: 0.6607 - val_auc: 0.9228 - val_loss: 2.9391 - val_weighted_f1: 0.6078 - learning_rate: 3.0000e-04
Epoch 11/25
37/37 ━━━━━━━━━━━━━━━━━━━━ 0s 53ms/step - accuracy: 0.6531 - auc: 0.8803 - loss: 3.1676 - weighted_f1: 0.6259WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
37/37 ━━━━━━━━━━━━━━━━━━━━ 3s 86ms/step - accuracy: 0.6528 - auc: 0.8799 - loss: 3.1706 - weighted_f1: 0.6256 - val_accuracy: 0.7321 - val_auc: 0.9351 - val_loss: 2.8754 - val_weighted_f1: 0.7161 - learning_rate: 3.0000e-04
Epoch 12/25
37/37 ━━━━━━━━━━━━━━━━━━━━ 2s 58ms/step - accuracy: 0.6744 - auc: 0.8847 - loss: 3.1774 - weighted_f1: 0.6526 - val_accuracy: 0.6964 - val_auc: 0.9167 - val_loss: 2.8511 - val_weighted_f1: 0.6650 - learning_rate: 3.0000e-04
Epoch 13/25
36/37 ━━━━━━━━━━━━━━━━━━━━ 0s 51ms/step - accuracy: 0.6338 - auc: 0.8577 - loss: 3.2165 - weighted_f1: 0.6170WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
37/37 ━━━━━━━━━━━━━━━━━━━━ 3s 85ms/step - accuracy: 0.6336 - auc: 0.8579 - loss: 3.2164 - weighted_f1: 0.6166 - val_accuracy: 0.7768 - val_auc: 0.9377 - val_loss: 2.7790 - val_weighted_f1: 0.7671 - learning_rate: 3.0000e-04
Epoch 14/25
37/37 ━━━━━━━━━━━━━━━━━━━━ 2s 51ms/step - accuracy: 0.6779 - auc: 0.8910 - loss: 2.9324 - weighted_f1: 0.6581 - val_accuracy: 0.7411 - val_auc: 0.9418 - val_loss: 2.7305 - val_weighted_f1: 0.7202 - learning_rate: 3.0000e-04
Epoch 15/25
37/37 ━━━━━━━━━━━━━━━━━━━━ 2s 53ms/step - accuracy: 0.7205 - auc: 0.9131 - loss: 2.8459 - weighted_f1: 0.7022 - val_accuracy: 0.7232 - val_auc: 0.9359 - val_loss: 2.7402 - val_weighted_f1: 0.6946 - learning_rate: 3.0000e-04
Epoch 16/25
37/37 ━━━━━━━━━━━━━━━━━━━━ 2s 54ms/step - accuracy: 0.6990 - auc: 0.9066 - loss: 2.9447 - weighted_f1: 0.6875 - val_accuracy: 0.7679 - val_auc: 0.9494 - val_loss: 2.6724 - val_weighted_f1: 0.7550 - learning_rate: 3.0000e-04
Epoch 17/25
36/37 ━━━━━━━━━━━━━━━━━━━━ 0s 47ms/step - accuracy: 0.7179 - auc: 0.9176 - loss: 2.8563 - weighted_f1: 0.7019WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
37/37 ━━━━━━━━━━━━━━━━━━━━ 3s 79ms/step - accuracy: 0.7189 - auc: 0.9182 - loss: 2.8493 - weighted_f1: 0.7030 - val_accuracy: 0.7946 - val_auc: 0.9545 - val_loss: 2.6068 - val_weighted_f1: 0.7879 - learning_rate: 3.0000e-04
Epoch 18/25
37/37 ━━━━━━━━━━━━━━━━━━━━ 0s 51ms/step - accuracy: 0.7434 - auc: 0.9306 - loss: 2.6868 - weighted_f1: 0.7296WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
37/37 ━━━━━━━━━━━━━━━━━━━━ 3s 85ms/step - accuracy: 0.7437 - auc: 0.9306 - loss: 2.6863 - weighted_f1: 0.7300 - val_accuracy: 0.7946 - val_auc: 0.9566 - val_loss: 2.5298 - val_weighted_f1: 0.7883 - learning_rate: 3.0000e-04
Epoch 19/25
36/37 ━━━━━━━━━━━━━━━━━━━━ 0s 52ms/step - accuracy: 0.7824 - auc: 0.9432 - loss: 2.5785 - weighted_f1: 0.7686WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
37/37 ━━━━━━━━━━━━━━━━━━━━ 3s 86ms/step - accuracy: 0.7814 - auc: 0.9430 - loss: 2.5793 - weighted_f1: 0.7677 - val_accuracy: 0.8214 - val_auc: 0.9675 - val_loss: 2.5122 - val_weighted_f1: 0.8190 - learning_rate: 3.0000e-04
Epoch 20/25
37/37 ━━━━━━━━━━━━━━━━━━━━ 0s 52ms/step - accuracy: 0.7618 - auc: 0.9437 - loss: 2.6081 - weighted_f1: 0.7486WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
37/37 ━━━━━━━━━━━━━━━━━━━━ 3s 84ms/step - accuracy: 0.7624 - auc: 0.9438 - loss: 2.6066 - weighted_f1: 0.7494 - val_accuracy: 0.8571 - val_auc: 0.9695 - val_loss: 2.4520 - val_weighted_f1: 0.8543 - learning_rate: 3.0000e-04
Epoch 21/25
37/37 ━━━━━━━━━━━━━━━━━━━━ 2s 55ms/step - accuracy: 0.7823 - auc: 0.9490 - loss: 2.5201 - weighted_f1: 0.7751 - val_accuracy: 0.8304 - val_auc: 0.9712 - val_loss: 2.3718 - val_weighted_f1: 0.8297 - learning_rate: 3.0000e-04
Epoch 22/25
37/37 ━━━━━━━━━━━━━━━━━━━━ 2s 54ms/step - accuracy: 0.7977 - auc: 0.9578 - loss: 2.3843 - weighted_f1: 0.7875 - val_accuracy: 0.8482 - val_auc: 0.9707 - val_loss: 2.3447 - val_weighted_f1: 0.8451 - learning_rate: 3.0000e-04
Epoch 23/25
37/37 ━━━━━━━━━━━━━━━━━━━━ 2s 52ms/step - accuracy: 0.7743 - auc: 0.9514 - loss: 2.4608 - weighted_f1: 0.7731 - val_accuracy: 0.8304 - val_auc: 0.9692 - val_loss: 2.3363 - val_weighted_f1: 0.8296 - learning_rate: 3.0000e-04
Epoch 24/25
36/37 ━━━━━━━━━━━━━━━━━━━━ 0s 49ms/step - accuracy: 0.8303 - auc: 0.9693 - loss: 2.2934 - weighted_f1: 0.8262WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
37/37 ━━━━━━━━━━━━━━━━━━━━ 3s 82ms/step - accuracy: 0.8295 - auc: 0.9690 - loss: 2.2926 - weighted_f1: 0.8253 - val_accuracy: 0.8661 - val_auc: 0.9704 - val_loss: 2.2773 - val_weighted_f1: 0.8645 - learning_rate: 3.0000e-04
Epoch 25/25
37/37 ━━━━━━━━━━━━━━━━━━━━ 2s 54ms/step - accuracy: 0.7982 - auc: 0.9645 - loss: 2.2867 - weighted_f1: 0.7972 - val_accuracy: 0.8393 - val_auc: 0.9678 - val_loss: 2.2746 - val_weighted_f1: 0.8363 - learning_rate: 3.0000e-04
Fully_balanced stage results - Loss: 2.2773, Accuracy: 0.8661, AUC: 0.9704, Weighted F1: 0.8645
Stage 2: Gradual imbalance introduction...
Epoch 1/25
29/29 ━━━━━━━━━━━━━━━━━━━━ 0s 51ms/step - accuracy: 0.7272 - auc: 0.9254 - loss: 2.3292 - weighted_f1: 0.7209WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
29/29 ━━━━━━━━━━━━━━━━━━━━ 57s 481ms/step - accuracy: 0.7276 - auc: 0.9256 - loss: 2.3287 - weighted_f1: 0.7213 - val_accuracy: 0.8571 - val_auc: 0.9710 - val_loss: 2.2362 - val_weighted_f1: 0.8563 - learning_rate: 1.0000e-04
Epoch 2/25
29/29 ━━━━━━━━━━━━━━━━━━━━ 0s 50ms/step - accuracy: 0.7269 - auc: 0.9317 - loss: 2.3150 - weighted_f1: 0.7236WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
29/29 ━━━━━━━━━━━━━━━━━━━━ 3s 93ms/step - accuracy: 0.7276 - auc: 0.9319 - loss: 2.3138 - weighted_f1: 0.7242 - val_accuracy: 0.8750 - val_auc: 0.9736 - val_loss: 2.2055 - val_weighted_f1: 0.8747 - learning_rate: 1.0000e-04
Epoch 3/25
28/29 ━━━━━━━━━━━━━━━━━━━━ 0s 47ms/step - accuracy: 0.7346 - auc: 0.9394 - loss: 2.2091 - weighted_f1: 0.7352WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
29/29 ━━━━━━━━━━━━━━━━━━━━ 3s 92ms/step - accuracy: 0.7368 - auc: 0.9401 - loss: 2.2106 - weighted_f1: 0.7373 - val_accuracy: 0.8839 - val_auc: 0.9747 - val_loss: 2.1727 - val_weighted_f1: 0.8845 - learning_rate: 1.0000e-04
Epoch 4/25
28/29 ━━━━━━━━━━━━━━━━━━━━ 0s 49ms/step - accuracy: 0.7728 - auc: 0.9575 - loss: 2.1155 - weighted_f1: 0.7721WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
29/29 ━━━━━━━━━━━━━━━━━━━━ 3s 91ms/step - accuracy: 0.7746 - auc: 0.9574 - loss: 2.1156 - weighted_f1: 0.7738 - val_accuracy: 0.8929 - val_auc: 0.9771 - val_loss: 2.1466 - val_weighted_f1: 0.8932 - learning_rate: 1.0000e-04
Epoch 5/25
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 57ms/step - accuracy: 0.8062 - auc: 0.9592 - loss: 2.0802 - weighted_f1: 0.8015 - val_accuracy: 0.8839 - val_auc: 0.9772 - val_loss: 2.1228 - val_weighted_f1: 0.8845 - learning_rate: 1.0000e-04
Epoch 6/25
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 57ms/step - accuracy: 0.8111 - auc: 0.9599 - loss: 2.0766 - weighted_f1: 0.8038 - val_accuracy: 0.8839 - val_auc: 0.9780 - val_loss: 2.1085 - val_weighted_f1: 0.8847 - learning_rate: 1.0000e-04
Epoch 7/25
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 57ms/step - accuracy: 0.8194 - auc: 0.9583 - loss: 2.0415 - weighted_f1: 0.8148 - val_accuracy: 0.8661 - val_auc: 0.9778 - val_loss: 2.0878 - val_weighted_f1: 0.8671 - learning_rate: 1.0000e-04
Epoch 8/25
28/29 ━━━━━━━━━━━━━━━━━━━━ 0s 52ms/step - accuracy: 0.8211 - auc: 0.9594 - loss: 2.0173 - weighted_f1: 0.8195WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
29/29 ━━━━━━━━━━━━━━━━━━━━ 3s 94ms/step - accuracy: 0.8206 - auc: 0.9596 - loss: 2.0162 - weighted_f1: 0.8190 - val_accuracy: 0.9107 - val_auc: 0.9796 - val_loss: 2.0649 - val_weighted_f1: 0.9109 - learning_rate: 1.0000e-04
Epoch 9/25
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 59ms/step - accuracy: 0.8272 - auc: 0.9691 - loss: 1.9670 - weighted_f1: 0.8223 - val_accuracy: 0.9107 - val_auc: 0.9820 - val_loss: 2.0355 - val_weighted_f1: 0.9109 - learning_rate: 1.0000e-04
Epoch 10/25
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 59ms/step - accuracy: 0.8054 - auc: 0.9631 - loss: 1.9766 - weighted_f1: 0.7996 - val_accuracy: 0.9018 - val_auc: 0.9816 - val_loss: 2.0220 - val_weighted_f1: 0.9019 - learning_rate: 1.0000e-04
Epoch 11/25
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 56ms/step - accuracy: 0.8494 - auc: 0.9770 - loss: 1.9234 - weighted_f1: 0.8487 - val_accuracy: 0.8929 - val_auc: 0.9814 - val_loss: 2.0003 - val_weighted_f1: 0.8932 - learning_rate: 1.0000e-04
Epoch 12/25
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 52ms/step - accuracy: 0.8464 - auc: 0.9740 - loss: 1.9080 - weighted_f1: 0.8441 - val_accuracy: 0.8929 - val_auc: 0.9821 - val_loss: 1.9874 - val_weighted_f1: 0.8935 - learning_rate: 1.0000e-04
Epoch 13/25
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 57ms/step - accuracy: 0.8115 - auc: 0.9604 - loss: 1.9246 - weighted_f1: 0.8076 - val_accuracy: 0.8929 - val_auc: 0.9833 - val_loss: 1.9668 - val_weighted_f1: 0.8945 - learning_rate: 1.0000e-04
Epoch 14/25
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 59ms/step - accuracy: 0.8736 - auc: 0.9777 - loss: 1.8812 - weighted_f1: 0.8715 - val_accuracy: 0.9018 - val_auc: 0.9842 - val_loss: 1.9554 - val_weighted_f1: 0.9026 - learning_rate: 1.0000e-04
Epoch 15/25
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 56ms/step - accuracy: 0.8072 - auc: 0.9684 - loss: 1.8949 - weighted_f1: 0.8073 - val_accuracy: 0.9018 - val_auc: 0.9841 - val_loss: 1.9477 - val_weighted_f1: 0.9026 - learning_rate: 1.0000e-04
Epoch 16/25
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 58ms/step - accuracy: 0.8618 - auc: 0.9749 - loss: 1.8452 - weighted_f1: 0.8609 - val_accuracy: 0.9018 - val_auc: 0.9846 - val_loss: 1.9356 - val_weighted_f1: 0.9026 - learning_rate: 1.0000e-04
Epoch 17/25
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 57ms/step - accuracy: 0.8402 - auc: 0.9703 - loss: 1.8446 - weighted_f1: 0.8354 - val_accuracy: 0.9018 - val_auc: 0.9850 - val_loss: 1.9300 - val_weighted_f1: 0.9026 - learning_rate: 1.0000e-04
Epoch 18/25
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 58ms/step - accuracy: 0.8517 - auc: 0.9787 - loss: 1.7841 - weighted_f1: 0.8502 - val_accuracy: 0.9018 - val_auc: 0.9848 - val_loss: 1.9176 - val_weighted_f1: 0.9026 - learning_rate: 1.0000e-04
Epoch 19/25
29/29 ━━━━━━━━━━━━━━━━━━━━ 0s 50ms/step - accuracy: 0.8832 - auc: 0.9752 - loss: 1.7880 - weighted_f1: 0.8831WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
29/29 ━━━━━━━━━━━━━━━━━━━━ 3s 92ms/step - accuracy: 0.8826 - auc: 0.9751 - loss: 1.7902 - weighted_f1: 0.8825 - val_accuracy: 0.9107 - val_auc: 0.9862 - val_loss: 1.9050 - val_weighted_f1: 0.9116 - learning_rate: 1.0000e-04
Epoch 20/25
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 61ms/step - accuracy: 0.8230 - auc: 0.9733 - loss: 1.8011 - weighted_f1: 0.8207 - val_accuracy: 0.8839 - val_auc: 0.9855 - val_loss: 1.8829 - val_weighted_f1: 0.8858 - learning_rate: 1.0000e-04
Epoch 21/25
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 56ms/step - accuracy: 0.8767 - auc: 0.9831 - loss: 1.7364 - weighted_f1: 0.8754 - val_accuracy: 0.8929 - val_auc: 0.9857 - val_loss: 1.8692 - val_weighted_f1: 0.8945 - learning_rate: 1.0000e-04
Epoch 22/25
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 58ms/step - accuracy: 0.8721 - auc: 0.9836 - loss: 1.7472 - weighted_f1: 0.8703 - val_accuracy: 0.9107 - val_auc: 0.9857 - val_loss: 1.8675 - val_weighted_f1: 0.9116 - learning_rate: 1.0000e-04
Epoch 23/25
29/29 ━━━━━━━━━━━━━━━━━━━━ 0s 47ms/step - accuracy: 0.8369 - auc: 0.9727 - loss: 1.7642 - weighted_f1: 0.8355WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
29/29 ━━━━━━━━━━━━━━━━━━━━ 3s 93ms/step - accuracy: 0.8374 - auc: 0.9728 - loss: 1.7638 - weighted_f1: 0.8360 - val_accuracy: 0.9196 - val_auc: 0.9863 - val_loss: 1.8577 - val_weighted_f1: 0.9202 - learning_rate: 1.0000e-04
Epoch 24/25
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 57ms/step - accuracy: 0.8622 - auc: 0.9794 - loss: 1.7532 - weighted_f1: 0.8638 - val_accuracy: 0.9018 - val_auc: 0.9853 - val_loss: 1.8636 - val_weighted_f1: 0.9024 - learning_rate: 1.0000e-04
Epoch 25/25
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 57ms/step - accuracy: 0.8944 - auc: 0.9870 - loss: 1.7096 - weighted_f1: 0.8949 - val_accuracy: 0.8839 - val_auc: 0.9829 - val_loss: 1.8502 - val_weighted_f1: 0.8857 - learning_rate: 1.0000e-04
Gradual stage results - Loss: 1.8577, Accuracy: 0.9196, AUC: 0.9863, Weighted F1: 0.9202
Stage 3: Full dataset training...
Epoch 1/50
29/29 ━━━━━━━━━━━━━━━━━━━━ 0s 48ms/step - accuracy: 0.8514 - auc: 0.9711 - loss: 1.7518 - weighted_f1: 0.8511WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
29/29 ━━━━━━━━━━━━━━━━━━━━ 57s 485ms/step - accuracy: 0.8511 - auc: 0.9712 - loss: 1.7516 - weighted_f1: 0.8507 - val_accuracy: 0.9107 - val_auc: 0.9875 - val_loss: 1.8402 - val_weighted_f1: 0.9111 - learning_rate: 5.0000e-05
Epoch 2/50
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 55ms/step - accuracy: 0.9201 - auc: 0.9876 - loss: 1.6842 - weighted_f1: 0.9206 - val_accuracy: 0.9107 - val_auc: 0.9880 - val_loss: 1.8284 - val_weighted_f1: 0.9111 - learning_rate: 5.0000e-05
Epoch 3/50
28/29 ━━━━━━━━━━━━━━━━━━━━ 0s 49ms/step - accuracy: 0.8609 - auc: 0.9728 - loss: 1.7416 - weighted_f1: 0.8604WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
29/29 ━━━━━━━━━━━━━━━━━━━━ 3s 91ms/step - accuracy: 0.8604 - auc: 0.9724 - loss: 1.7436 - weighted_f1: 0.8600 - val_accuracy: 0.9196 - val_auc: 0.9882 - val_loss: 1.8170 - val_weighted_f1: 0.9202 - learning_rate: 5.0000e-05
Epoch 4/50
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 57ms/step - accuracy: 0.8651 - auc: 0.9820 - loss: 1.6870 - weighted_f1: 0.8652 - val_accuracy: 0.9196 - val_auc: 0.9874 - val_loss: 1.8137 - val_weighted_f1: 0.9202 - learning_rate: 5.0000e-05
Epoch 5/50
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 59ms/step - accuracy: 0.8617 - auc: 0.9752 - loss: 1.7220 - weighted_f1: 0.8601 - val_accuracy: 0.9107 - val_auc: 0.9870 - val_loss: 1.8120 - val_weighted_f1: 0.9116 - learning_rate: 5.0000e-05
Epoch 6/50
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 61ms/step - accuracy: 0.8913 - auc: 0.9846 - loss: 1.6810 - weighted_f1: 0.8906 - val_accuracy: 0.9196 - val_auc: 0.9871 - val_loss: 1.8054 - val_weighted_f1: 0.9202 - learning_rate: 5.0000e-05
Epoch 7/50
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 57ms/step - accuracy: 0.8784 - auc: 0.9840 - loss: 1.7393 - weighted_f1: 0.8796 - val_accuracy: 0.9196 - val_auc: 0.9873 - val_loss: 1.7983 - val_weighted_f1: 0.9202 - learning_rate: 5.0000e-05
Epoch 8/50
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 54ms/step - accuracy: 0.9197 - auc: 0.9876 - loss: 1.6339 - weighted_f1: 0.9192 - val_accuracy: 0.8929 - val_auc: 0.9861 - val_loss: 1.7925 - val_weighted_f1: 0.8945 - learning_rate: 5.0000e-05
Epoch 9/50
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 54ms/step - accuracy: 0.8922 - auc: 0.9880 - loss: 1.6499 - weighted_f1: 0.8940 - val_accuracy: 0.8929 - val_auc: 0.9863 - val_loss: 1.7845 - val_weighted_f1: 0.8943 - learning_rate: 5.0000e-05
Epoch 10/50
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 55ms/step - accuracy: 0.9023 - auc: 0.9830 - loss: 1.6322 - weighted_f1: 0.9019 - val_accuracy: 0.9018 - val_auc: 0.9868 - val_loss: 1.7741 - val_weighted_f1: 0.9028 - learning_rate: 5.0000e-05
Epoch 11/50
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 58ms/step - accuracy: 0.9057 - auc: 0.9888 - loss: 1.6361 - weighted_f1: 0.9069 - val_accuracy: 0.9196 - val_auc: 0.9877 - val_loss: 1.7542 - val_weighted_f1: 0.9202 - learning_rate: 5.0000e-05
Epoch 12/50
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 56ms/step - accuracy: 0.8950 - auc: 0.9872 - loss: 1.6103 - weighted_f1: 0.8945 - val_accuracy: 0.9196 - val_auc: 0.9881 - val_loss: 1.7417 - val_weighted_f1: 0.9202 - learning_rate: 5.0000e-05
Epoch 13/50
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 57ms/step - accuracy: 0.8813 - auc: 0.9854 - loss: 1.6401 - weighted_f1: 0.8789 - val_accuracy: 0.9107 - val_auc: 0.9880 - val_loss: 1.7326 - val_weighted_f1: 0.9116 - learning_rate: 5.0000e-05
Epoch 14/50
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 57ms/step - accuracy: 0.8883 - auc: 0.9849 - loss: 1.6086 - weighted_f1: 0.8874 - val_accuracy: 0.9107 - val_auc: 0.9885 - val_loss: 1.7234 - val_weighted_f1: 0.9116 - learning_rate: 5.0000e-05
Epoch 15/50
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 53ms/step - accuracy: 0.8945 - auc: 0.9858 - loss: 1.7044 - weighted_f1: 0.8946 - val_accuracy: 0.9196 - val_auc: 0.9888 - val_loss: 1.7131 - val_weighted_f1: 0.9202 - learning_rate: 5.0000e-05
Epoch 16/50
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 59ms/step - accuracy: 0.9077 - auc: 0.9932 - loss: 1.5692 - weighted_f1: 0.9075 - val_accuracy: 0.9196 - val_auc: 0.9889 - val_loss: 1.7065 - val_weighted_f1: 0.9202 - learning_rate: 2.5000e-05
Epoch 17/50
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 55ms/step - accuracy: 0.9486 - auc: 0.9950 - loss: 1.5813 - weighted_f1: 0.9486 - val_accuracy: 0.9196 - val_auc: 0.9892 - val_loss: 1.7061 - val_weighted_f1: 0.9197 - learning_rate: 2.5000e-05
Epoch 18/50
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 58ms/step - accuracy: 0.8788 - auc: 0.9747 - loss: 1.7072 - weighted_f1: 0.8790 - val_accuracy: 0.9196 - val_auc: 0.9895 - val_loss: 1.7053 - val_weighted_f1: 0.9197 - learning_rate: 2.5000e-05
Epoch 19/50
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 59ms/step - accuracy: 0.9025 - auc: 0.9846 - loss: 1.6312 - weighted_f1: 0.9011 - val_accuracy: 0.9196 - val_auc: 0.9895 - val_loss: 1.7034 - val_weighted_f1: 0.9197 - learning_rate: 2.5000e-05
Epoch 20/50
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 56ms/step - accuracy: 0.8930 - auc: 0.9896 - loss: 1.5881 - weighted_f1: 0.8932 - val_accuracy: 0.9196 - val_auc: 0.9898 - val_loss: 1.6960 - val_weighted_f1: 0.9197 - learning_rate: 2.5000e-05
Epoch 21/50
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 56ms/step - accuracy: 0.9242 - auc: 0.9903 - loss: 1.5725 - weighted_f1: 0.9252 - val_accuracy: 0.9196 - val_auc: 0.9898 - val_loss: 1.6899 - val_weighted_f1: 0.9197 - learning_rate: 2.5000e-05
Epoch 22/50
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 58ms/step - accuracy: 0.8813 - auc: 0.9848 - loss: 1.5796 - weighted_f1: 0.8828 - val_accuracy: 0.9196 - val_auc: 0.9896 - val_loss: 1.6878 - val_weighted_f1: 0.9197 - learning_rate: 2.5000e-05
Epoch 23/50
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 58ms/step - accuracy: 0.8398 - auc: 0.9781 - loss: 1.6470 - weighted_f1: 0.8385 - val_accuracy: 0.9196 - val_auc: 0.9898 - val_loss: 1.6880 - val_weighted_f1: 0.9197 - learning_rate: 2.5000e-05
Epoch 24/50
28/29 ━━━━━━━━━━━━━━━━━━━━ 0s 48ms/step - accuracy: 0.9321 - auc: 0.9930 - loss: 1.5360 - weighted_f1: 0.9320WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
29/29 ━━━━━━━━━━━━━━━━━━━━ 3s 90ms/step - accuracy: 0.9304 - auc: 0.9927 - loss: 1.5371 - weighted_f1: 0.9303 - val_accuracy: 0.9286 - val_auc: 0.9898 - val_loss: 1.6830 - val_weighted_f1: 0.9288 - learning_rate: 2.5000e-05
Epoch 25/50
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 57ms/step - accuracy: 0.8862 - auc: 0.9866 - loss: 1.5523 - weighted_f1: 0.8844 - val_accuracy: 0.9286 - val_auc: 0.9901 - val_loss: 1.6786 - val_weighted_f1: 0.9288 - learning_rate: 2.5000e-05
Epoch 26/50
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 52ms/step - accuracy: 0.9231 - auc: 0.9928 - loss: 1.5415 - weighted_f1: 0.9228 - val_accuracy: 0.9286 - val_auc: 0.9899 - val_loss: 1.6766 - val_weighted_f1: 0.9288 - learning_rate: 2.5000e-05
Epoch 27/50
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 60ms/step - accuracy: 0.8907 - auc: 0.9842 - loss: 1.5612 - weighted_f1: 0.8906 - val_accuracy: 0.9286 - val_auc: 0.9901 - val_loss: 1.6733 - val_weighted_f1: 0.9288 - learning_rate: 2.5000e-05
Epoch 28/50
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 58ms/step - accuracy: 0.8899 - auc: 0.9883 - loss: 1.5538 - weighted_f1: 0.8895 - val_accuracy: 0.9286 - val_auc: 0.9898 - val_loss: 1.6694 - val_weighted_f1: 0.9288 - learning_rate: 2.5000e-05
Epoch 29/50
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 61ms/step - accuracy: 0.9450 - auc: 0.9930 - loss: 1.5175 - weighted_f1: 0.9454 - val_accuracy: 0.9286 - val_auc: 0.9901 - val_loss: 1.6644 - val_weighted_f1: 0.9288 - learning_rate: 2.5000e-05
Epoch 30/50
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 56ms/step - accuracy: 0.8910 - auc: 0.9847 - loss: 1.5624 - weighted_f1: 0.8919 - val_accuracy: 0.9286 - val_auc: 0.9900 - val_loss: 1.6642 - val_weighted_f1: 0.9288 - learning_rate: 2.5000e-05
Epoch 31/50
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 58ms/step - accuracy: 0.8968 - auc: 0.9832 - loss: 1.6731 - weighted_f1: 0.9000 - val_accuracy: 0.9286 - val_auc: 0.9900 - val_loss: 1.6586 - val_weighted_f1: 0.9288 - learning_rate: 2.5000e-05
Epoch 32/50
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 59ms/step - accuracy: 0.9332 - auc: 0.9929 - loss: 1.5089 - weighted_f1: 0.9330 - val_accuracy: 0.9286 - val_auc: 0.9900 - val_loss: 1.6543 - val_weighted_f1: 0.9288 - learning_rate: 2.5000e-05
Epoch 33/50
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 57ms/step - accuracy: 0.9088 - auc: 0.9873 - loss: 1.5467 - weighted_f1: 0.9089 - val_accuracy: 0.9286 - val_auc: 0.9901 - val_loss: 1.6520 - val_weighted_f1: 0.9288 - learning_rate: 2.5000e-05
Epoch 34/50
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 56ms/step - accuracy: 0.9110 - auc: 0.9900 - loss: 1.5099 - weighted_f1: 0.9109 - val_accuracy: 0.9286 - val_auc: 0.9901 - val_loss: 1.6477 - val_weighted_f1: 0.9288 - learning_rate: 2.5000e-05
Epoch 35/50
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 57ms/step - accuracy: 0.9075 - auc: 0.9904 - loss: 1.5476 - weighted_f1: 0.9074 - val_accuracy: 0.9286 - val_auc: 0.9900 - val_loss: 1.6454 - val_weighted_f1: 0.9288 - learning_rate: 2.5000e-05
Epoch 36/50
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 55ms/step - accuracy: 0.9338 - auc: 0.9901 - loss: 1.5297 - weighted_f1: 0.9338 - val_accuracy: 0.9286 - val_auc: 0.9899 - val_loss: 1.6423 - val_weighted_f1: 0.9288 - learning_rate: 2.5000e-05
Epoch 37/50
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 57ms/step - accuracy: 0.9243 - auc: 0.9933 - loss: 1.4870 - weighted_f1: 0.9239 - val_accuracy: 0.9286 - val_auc: 0.9899 - val_loss: 1.6395 - val_weighted_f1: 0.9288 - learning_rate: 1.2500e-05
Epoch 38/50
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 56ms/step - accuracy: 0.9243 - auc: 0.9900 - loss: 1.5007 - weighted_f1: 0.9249 - val_accuracy: 0.9286 - val_auc: 0.9899 - val_loss: 1.6383 - val_weighted_f1: 0.9288 - learning_rate: 1.2500e-05
Epoch 39/50
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 52ms/step - accuracy: 0.8999 - auc: 0.9847 - loss: 1.5220 - weighted_f1: 0.8990 - val_accuracy: 0.9286 - val_auc: 0.9900 - val_loss: 1.6379 - val_weighted_f1: 0.9288 - learning_rate: 1.2500e-05
Epoch 40/50
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 60ms/step - accuracy: 0.9542 - auc: 0.9960 - loss: 1.4708 - weighted_f1: 0.9542 - val_accuracy: 0.9286 - val_auc: 0.9900 - val_loss: 1.6341 - val_weighted_f1: 0.9288 - learning_rate: 1.2500e-05
Epoch 41/50
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 56ms/step - accuracy: 0.9271 - auc: 0.9921 - loss: 1.4932 - weighted_f1: 0.9268 - val_accuracy: 0.9286 - val_auc: 0.9899 - val_loss: 1.6302 - val_weighted_f1: 0.9288 - learning_rate: 1.2500e-05
Epoch 42/50
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 55ms/step - accuracy: 0.8832 - auc: 0.9853 - loss: 1.5643 - weighted_f1: 0.8822 - val_accuracy: 0.9286 - val_auc: 0.9898 - val_loss: 1.6278 - val_weighted_f1: 0.9288 - learning_rate: 1.2500e-05
Epoch 43/50
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 57ms/step - accuracy: 0.9008 - auc: 0.9883 - loss: 1.4900 - weighted_f1: 0.9012 - val_accuracy: 0.9286 - val_auc: 0.9900 - val_loss: 1.6264 - val_weighted_f1: 0.9288 - learning_rate: 1.2500e-05
Epoch 44/50
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 54ms/step - accuracy: 0.9100 - auc: 0.9862 - loss: 1.5041 - weighted_f1: 0.9099 - val_accuracy: 0.9286 - val_auc: 0.9898 - val_loss: 1.6270 - val_weighted_f1: 0.9288 - learning_rate: 1.2500e-05
Epoch 45/50
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 56ms/step - accuracy: 0.9142 - auc: 0.9920 - loss: 1.4814 - weighted_f1: 0.9137 - val_accuracy: 0.9286 - val_auc: 0.9900 - val_loss: 1.6248 - val_weighted_f1: 0.9288 - learning_rate: 1.2500e-05
Epoch 46/50
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 62ms/step - accuracy: 0.9011 - auc: 0.9883 - loss: 1.4963 - weighted_f1: 0.9010 - val_accuracy: 0.9286 - val_auc: 0.9900 - val_loss: 1.6247 - val_weighted_f1: 0.9288 - learning_rate: 1.2500e-05
Epoch 47/50
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 57ms/step - accuracy: 0.9317 - auc: 0.9938 - loss: 1.4905 - weighted_f1: 0.9321 - val_accuracy: 0.9286 - val_auc: 0.9902 - val_loss: 1.6220 - val_weighted_f1: 0.9288 - learning_rate: 1.2500e-05
Epoch 48/50
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 57ms/step - accuracy: 0.9266 - auc: 0.9914 - loss: 1.4876 - weighted_f1: 0.9273 - val_accuracy: 0.9286 - val_auc: 0.9903 - val_loss: 1.6183 - val_weighted_f1: 0.9288 - learning_rate: 1.2500e-05
Epoch 49/50
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 56ms/step - accuracy: 0.9119 - auc: 0.9926 - loss: 1.4782 - weighted_f1: 0.9116 - val_accuracy: 0.9286 - val_auc: 0.9904 - val_loss: 1.6167 - val_weighted_f1: 0.9288 - learning_rate: 6.2500e-06
Full stage results - Loss: 1.6830, Accuracy: 0.9286, AUC: 0.9898, Weighted F1: 0.9288
Final validation results for densenet_enhanced_mega_smote:
  Loss: 1.6830
  Accuracy: 0.9286
  AUC: 0.9898
  Weighted F1: 0.9288

============================================================
Training model 2/3 with adaptive_smote sampling
Model type: standard
============================================================
Resampling successful: 472 samples, distribution: [ 87 109 137 139]
After adaptive_smote: 472 samples
New distribution: [ 87 109 137 139]
Created enhanced resnet50v2 model with attention=True
Stage 1: Fully balanced training...
Epoch 1/25
36/37 ━━━━━━━━━━━━━━━━━━━━ 0s 49ms/step - accuracy: 0.2706 - auc: 0.5073 - loss: 8.3839 - weighted_f1: 0.2695WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
37/37 ━━━━━━━━━━━━━━━━━━━━ 39s 221ms/step - accuracy: 0.2718 - auc: 0.5094 - loss: 8.3633 - weighted_f1: 0.2705 - val_accuracy: 0.3304 - val_auc: 0.5714 - val_loss: 10.6828 - val_weighted_f1: 0.2473 - learning_rate: 3.0000e-04
Epoch 2/25
37/37 ━━━━━━━━━━━━━━━━━━━━ 0s 50ms/step - accuracy: 0.3671 - auc: 0.6248 - loss: 7.1475 - weighted_f1: 0.3632WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
37/37 ━━━━━━━━━━━━━━━━━━━━ 3s 88ms/step - accuracy: 0.3677 - auc: 0.6253 - loss: 7.1408 - weighted_f1: 0.3639 - val_accuracy: 0.3661 - val_auc: 0.6502 - val_loss: 11.3755 - val_weighted_f1: 0.2862 - learning_rate: 3.0000e-04
Epoch 3/25
37/37 ━━━━━━━━━━━━━━━━━━━━ 2s 54ms/step - accuracy: 0.4248 - auc: 0.7086 - loss: 6.2937 - weighted_f1: 0.4084 - val_accuracy: 0.2946 - val_auc: 0.5694 - val_loss: 11.2504 - val_weighted_f1: 0.1456 - learning_rate: 3.0000e-04
Epoch 4/25
36/37 ━━━━━━━━━━━━━━━━━━━━ 0s 51ms/step - accuracy: 0.4067 - auc: 0.7065 - loss: 6.0480 - weighted_f1: 0.3913WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
37/37 ━━━━━━━━━━━━━━━━━━━━ 3s 93ms/step - accuracy: 0.4069 - auc: 0.7061 - loss: 6.0443 - weighted_f1: 0.3916 - val_accuracy: 0.4821 - val_auc: 0.7022 - val_loss: 8.2362 - val_weighted_f1: 0.4083 - learning_rate: 3.0000e-04
Epoch 5/25
37/37 ━━━━━━━━━━━━━━━━━━━━ 2s 54ms/step - accuracy: 0.4567 - auc: 0.7187 - loss: 5.4844 - weighted_f1: 0.4473 - val_accuracy: 0.3839 - val_auc: 0.7024 - val_loss: 7.2887 - val_weighted_f1: 0.3016 - learning_rate: 3.0000e-04
Epoch 6/25
37/37 ━━━━━━━━━━━━━━━━━━━━ 0s 47ms/step - accuracy: 0.4842 - auc: 0.7547 - loss: 5.2910 - weighted_f1: 0.4776WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
37/37 ━━━━━━━━━━━━━━━━━━━━ 3s 94ms/step - accuracy: 0.4845 - auc: 0.7549 - loss: 5.2926 - weighted_f1: 0.4775 - val_accuracy: 0.4821 - val_auc: 0.7580 - val_loss: 5.8058 - val_weighted_f1: 0.4295 - learning_rate: 3.0000e-04
Epoch 7/25
37/37 ━━━━━━━━━━━━━━━━━━━━ 0s 50ms/step - accuracy: 0.5153 - auc: 0.7854 - loss: 4.9144 - weighted_f1: 0.4802WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
37/37 ━━━━━━━━━━━━━━━━━━━━ 3s 90ms/step - accuracy: 0.5154 - auc: 0.7854 - loss: 4.9150 - weighted_f1: 0.4804 - val_accuracy: 0.5357 - val_auc: 0.7758 - val_loss: 5.2142 - val_weighted_f1: 0.4804 - learning_rate: 3.0000e-04
Epoch 8/25
37/37 ━━━━━━━━━━━━━━━━━━━━ 2s 57ms/step - accuracy: 0.5241 - auc: 0.7902 - loss: 4.6338 - weighted_f1: 0.4935 - val_accuracy: 0.5357 - val_auc: 0.8526 - val_loss: 4.5711 - val_weighted_f1: 0.4553 - learning_rate: 3.0000e-04
Epoch 9/25
37/37 ━━━━━━━━━━━━━━━━━━━━ 0s 50ms/step - accuracy: 0.5861 - auc: 0.8364 - loss: 4.3405 - weighted_f1: 0.5672WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
37/37 ━━━━━━━━━━━━━━━━━━━━ 3s 93ms/step - accuracy: 0.5855 - auc: 0.8362 - loss: 4.3380 - weighted_f1: 0.5667 - val_accuracy: 0.6161 - val_auc: 0.8835 - val_loss: 3.8576 - val_weighted_f1: 0.5902 - learning_rate: 3.0000e-04
Epoch 10/25
36/37 ━━━━━━━━━━━━━━━━━━━━ 0s 51ms/step - accuracy: 0.5712 - auc: 0.8261 - loss: 4.0695 - weighted_f1: 0.5242WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
37/37 ━━━━━━━━━━━━━━━━━━━━ 3s 93ms/step - accuracy: 0.5732 - auc: 0.8277 - loss: 4.0657 - weighted_f1: 0.5269 - val_accuracy: 0.6607 - val_auc: 0.9119 - val_loss: 3.9146 - val_weighted_f1: 0.6658 - learning_rate: 3.0000e-04
Epoch 11/25
37/37 ━━━━━━━━━━━━━━━━━━━━ 2s 55ms/step - accuracy: 0.6434 - auc: 0.8900 - loss: 3.7391 - weighted_f1: 0.6138 - val_accuracy: 0.5982 - val_auc: 0.9034 - val_loss: 4.1204 - val_weighted_f1: 0.6050 - learning_rate: 3.0000e-04
Epoch 12/25
37/37 ━━━━━━━━━━━━━━━━━━━━ 2s 56ms/step - accuracy: 0.6916 - auc: 0.9090 - loss: 3.4892 - weighted_f1: 0.6612 - val_accuracy: 0.6518 - val_auc: 0.9042 - val_loss: 3.7069 - val_weighted_f1: 0.5814 - learning_rate: 3.0000e-04
Epoch 13/25
37/37 ━━━━━━━━━━━━━━━━━━━━ 2s 53ms/step - accuracy: 0.7459 - auc: 0.9397 - loss: 3.1869 - weighted_f1: 0.7293 - val_accuracy: 0.6071 - val_auc: 0.8961 - val_loss: 4.0548 - val_weighted_f1: 0.5283 - learning_rate: 3.0000e-04
Epoch 14/25
37/37 ━━━━━━━━━━━━━━━━━━━━ 0s 45ms/step - accuracy: 0.6770 - auc: 0.9197 - loss: 3.0679 - weighted_f1: 0.6525WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
37/37 ━━━━━━━━━━━━━━━━━━━━ 3s 88ms/step - accuracy: 0.6779 - auc: 0.9199 - loss: 3.0665 - weighted_f1: 0.6533 - val_accuracy: 0.7321 - val_auc: 0.9445 - val_loss: 3.0261 - val_weighted_f1: 0.7239 - learning_rate: 3.0000e-04
Epoch 15/25
37/37 ━━━━━━━━━━━━━━━━━━━━ 2s 54ms/step - accuracy: 0.6958 - auc: 0.9284 - loss: 2.9636 - weighted_f1: 0.6764 - val_accuracy: 0.7054 - val_auc: 0.9332 - val_loss: 2.8970 - val_weighted_f1: 0.6966 - learning_rate: 3.0000e-04
Epoch 16/25
37/37 ━━━━━━━━━━━━━━━━━━━━ 0s 49ms/step - accuracy: 0.7478 - auc: 0.9394 - loss: 2.7918 - weighted_f1: 0.7346WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
37/37 ━━━━━━━━━━━━━━━━━━━━ 3s 89ms/step - accuracy: 0.7474 - auc: 0.9392 - loss: 2.7909 - weighted_f1: 0.7340 - val_accuracy: 0.7679 - val_auc: 0.9509 - val_loss: 2.6704 - val_weighted_f1: 0.7661 - learning_rate: 3.0000e-04
Epoch 17/25
37/37 ━━━━━━━━━━━━━━━━━━━━ 2s 54ms/step - accuracy: 0.7771 - auc: 0.9442 - loss: 2.6038 - weighted_f1: 0.7645 - val_accuracy: 0.7768 - val_auc: 0.9546 - val_loss: 2.5281 - val_weighted_f1: 0.7632 - learning_rate: 3.0000e-04
Epoch 18/25
37/37 ━━━━━━━━━━━━━━━━━━━━ 0s 49ms/step - accuracy: 0.7477 - auc: 0.9307 - loss: 2.7381 - weighted_f1: 0.7364WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
37/37 ━━━━━━━━━━━━━━━━━━━━ 3s 91ms/step - accuracy: 0.7483 - auc: 0.9311 - loss: 2.7343 - weighted_f1: 0.7371 - val_accuracy: 0.7857 - val_auc: 0.9578 - val_loss: 2.5580 - val_weighted_f1: 0.7858 - learning_rate: 3.0000e-04
Epoch 19/25
37/37 ━━━━━━━━━━━━━━━━━━━━ 0s 49ms/step - accuracy: 0.8031 - auc: 0.9551 - loss: 2.3353 - weighted_f1: 0.7952WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
37/37 ━━━━━━━━━━━━━━━━━━━━ 3s 89ms/step - accuracy: 0.8034 - auc: 0.9552 - loss: 2.3365 - weighted_f1: 0.7956 - val_accuracy: 0.8661 - val_auc: 0.9772 - val_loss: 2.2174 - val_weighted_f1: 0.8655 - learning_rate: 3.0000e-04
Epoch 20/25
37/37 ━━━━━━━━━━━━━━━━━━━━ 2s 54ms/step - accuracy: 0.8261 - auc: 0.9676 - loss: 2.2109 - weighted_f1: 0.8219 - val_accuracy: 0.8393 - val_auc: 0.9761 - val_loss: 2.1502 - val_weighted_f1: 0.8371 - learning_rate: 3.0000e-04
Epoch 21/25
37/37 ━━━━━━━━━━━━━━━━━━━━ 2s 52ms/step - accuracy: 0.8509 - auc: 0.9673 - loss: 2.1182 - weighted_f1: 0.8451 - val_accuracy: 0.7232 - val_auc: 0.9488 - val_loss: 2.1553 - val_weighted_f1: 0.7044 - learning_rate: 3.0000e-04
Epoch 22/25
37/37 ━━━━━━━━━━━━━━━━━━━━ 2s 54ms/step - accuracy: 0.8275 - auc: 0.9646 - loss: 2.1007 - weighted_f1: 0.8229 - val_accuracy: 0.6964 - val_auc: 0.9299 - val_loss: 2.1290 - val_weighted_f1: 0.6860 - learning_rate: 3.0000e-04
Epoch 23/25
37/37 ━━━━━━━━━━━━━━━━━━━━ 0s 51ms/step - accuracy: 0.8152 - auc: 0.9713 - loss: 1.9593 - weighted_f1: 0.8055WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
37/37 ━━━━━━━━━━━━━━━━━━━━ 3s 93ms/step - accuracy: 0.8161 - auc: 0.9714 - loss: 1.9591 - weighted_f1: 0.8064 - val_accuracy: 0.8929 - val_auc: 0.9708 - val_loss: 2.0726 - val_weighted_f1: 0.8931 - learning_rate: 3.0000e-04
Epoch 24/25
37/37 ━━━━━━━━━━━━━━━━━━━━ 2s 54ms/step - accuracy: 0.8805 - auc: 0.9777 - loss: 1.8871 - weighted_f1: 0.8779 - val_accuracy: 0.8393 - val_auc: 0.9753 - val_loss: 1.8540 - val_weighted_f1: 0.8373 - learning_rate: 3.0000e-04
Epoch 25/25
37/37 ━━━━━━━━━━━━━━━━━━━━ 2s 56ms/step - accuracy: 0.9047 - auc: 0.9842 - loss: 1.7949 - weighted_f1: 0.9031 - val_accuracy: 0.8393 - val_auc: 0.9735 - val_loss: 1.8655 - val_weighted_f1: 0.8361 - learning_rate: 3.0000e-04
Fully_balanced stage results - Loss: 2.0726, Accuracy: 0.8929, AUC: 0.9708, Weighted F1: 0.8931
Stage 2: Gradual imbalance introduction...
Epoch 1/25
28/29 ━━━━━━━━━━━━━━━━━━━━ 0s 50ms/step - accuracy: 0.8513 - auc: 0.9691 - loss: 1.8756 - weighted_f1: 0.8517WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
29/29 ━━━━━━━━━━━━━━━━━━━━ 36s 271ms/step - accuracy: 0.8506 - auc: 0.9691 - loss: 1.8749 - weighted_f1: 0.8506 - val_accuracy: 0.9286 - val_auc: 0.9833 - val_loss: 1.8446 - val_weighted_f1: 0.9290 - learning_rate: 1.0000e-04
Epoch 2/25
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 59ms/step - accuracy: 0.8172 - auc: 0.9656 - loss: 1.8071 - weighted_f1: 0.8168 - val_accuracy: 0.8839 - val_auc: 0.9824 - val_loss: 1.7578 - val_weighted_f1: 0.8847 - learning_rate: 1.0000e-04
Epoch 3/25
28/29 ━━━━━━━━━━━━━━━━━━━━ 0s 47ms/step - accuracy: 0.8407 - auc: 0.9687 - loss: 1.7340 - weighted_f1: 0.8394WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
29/29 ━━━━━━━━━━━━━━━━━━━━ 3s 102ms/step - accuracy: 0.8412 - auc: 0.9690 - loss: 1.7365 - weighted_f1: 0.8399 - val_accuracy: 0.9375 - val_auc: 0.9893 - val_loss: 1.6955 - val_weighted_f1: 0.9374 - learning_rate: 1.0000e-04
Epoch 4/25
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 57ms/step - accuracy: 0.8497 - auc: 0.9697 - loss: 1.7381 - weighted_f1: 0.8488 - val_accuracy: 0.9196 - val_auc: 0.9897 - val_loss: 1.6689 - val_weighted_f1: 0.9197 - learning_rate: 1.0000e-04
Epoch 5/25
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 53ms/step - accuracy: 0.8252 - auc: 0.9665 - loss: 1.6420 - weighted_f1: 0.8199 - val_accuracy: 0.8750 - val_auc: 0.9824 - val_loss: 1.6939 - val_weighted_f1: 0.8767 - learning_rate: 1.0000e-04
Epoch 6/25
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 53ms/step - accuracy: 0.9088 - auc: 0.9879 - loss: 1.5425 - weighted_f1: 0.9078 - val_accuracy: 0.8929 - val_auc: 0.9855 - val_loss: 1.6394 - val_weighted_f1: 0.8938 - learning_rate: 1.0000e-04
Epoch 7/25
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 56ms/step - accuracy: 0.8953 - auc: 0.9813 - loss: 1.5324 - weighted_f1: 0.8975 - val_accuracy: 0.9018 - val_auc: 0.9879 - val_loss: 1.5930 - val_weighted_f1: 0.9021 - learning_rate: 1.0000e-04
Epoch 8/25
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 58ms/step - accuracy: 0.8963 - auc: 0.9805 - loss: 1.6064 - weighted_f1: 0.8956 - val_accuracy: 0.8661 - val_auc: 0.9838 - val_loss: 1.5539 - val_weighted_f1: 0.8677 - learning_rate: 1.0000e-04
Epoch 9/25
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 55ms/step - accuracy: 0.9294 - auc: 0.9923 - loss: 1.4786 - weighted_f1: 0.9290 - val_accuracy: 0.9196 - val_auc: 0.9893 - val_loss: 1.5467 - val_weighted_f1: 0.9204 - learning_rate: 1.0000e-04
Epoch 10/25
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 58ms/step - accuracy: 0.8999 - auc: 0.9873 - loss: 1.4386 - weighted_f1: 0.9010 - val_accuracy: 0.9196 - val_auc: 0.9898 - val_loss: 1.5286 - val_weighted_f1: 0.9200 - learning_rate: 1.0000e-04
Epoch 11/25
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 53ms/step - accuracy: 0.9193 - auc: 0.9829 - loss: 1.4186 - weighted_f1: 0.9186 - val_accuracy: 0.9196 - val_auc: 0.9906 - val_loss: 1.5002 - val_weighted_f1: 0.9202 - learning_rate: 1.0000e-04
Epoch 12/25
29/29 ━━━━━━━━━━━━━━━━━━━━ 1s 50ms/step - accuracy: 0.9374 - auc: 0.9931 - loss: 1.3769 - weighted_f1: 0.9372 - val_accuracy: 0.9196 - val_auc: 0.9901 - val_loss: 1.4293 - val_weighted_f1: 0.9199 - learning_rate: 1.0000e-04
Epoch 13/25
29/29 ━━━━━━━━━━━━━━━━━━━━ 0s 45ms/step - accuracy: 0.9034 - auc: 0.9894 - loss: 1.3606 - weighted_f1: 0.9045WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
29/29 ━━━━━━━━━━━━━━━━━━━━ 3s 102ms/step - accuracy: 0.9036 - auc: 0.9893 - loss: 1.3611 - weighted_f1: 0.9048 - val_accuracy: 0.9375 - val_auc: 0.9933 - val_loss: 1.3934 - val_weighted_f1: 0.9379 - learning_rate: 1.0000e-04
Epoch 14/25
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 59ms/step - accuracy: 0.9443 - auc: 0.9956 - loss: 1.3202 - weighted_f1: 0.9437 - val_accuracy: 0.9196 - val_auc: 0.9906 - val_loss: 1.4085 - val_weighted_f1: 0.9204 - learning_rate: 1.0000e-04
Epoch 15/25
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 57ms/step - accuracy: 0.9417 - auc: 0.9938 - loss: 1.3093 - weighted_f1: 0.9410 - val_accuracy: 0.9375 - val_auc: 0.9929 - val_loss: 1.3710 - val_weighted_f1: 0.9379 - learning_rate: 1.0000e-04
Epoch 16/25
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 57ms/step - accuracy: 0.9334 - auc: 0.9930 - loss: 1.3216 - weighted_f1: 0.9333 - val_accuracy: 0.9375 - val_auc: 0.9941 - val_loss: 1.3538 - val_weighted_f1: 0.9374 - learning_rate: 1.0000e-04
Epoch 17/25
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 59ms/step - accuracy: 0.9220 - auc: 0.9845 - loss: 1.4038 - weighted_f1: 0.9216 - val_accuracy: 0.9107 - val_auc: 0.9920 - val_loss: 1.3323 - val_weighted_f1: 0.9110 - learning_rate: 1.0000e-04
Epoch 18/25
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 55ms/step - accuracy: 0.9321 - auc: 0.9945 - loss: 1.2606 - weighted_f1: 0.9326 - val_accuracy: 0.9286 - val_auc: 0.9931 - val_loss: 1.3177 - val_weighted_f1: 0.9294 - learning_rate: 1.0000e-04
Epoch 19/25
28/29 ━━━━━━━━━━━━━━━━━━━━ 0s 49ms/step - accuracy: 0.9261 - auc: 0.9947 - loss: 1.2476 - weighted_f1: 0.9266WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
29/29 ━━━━━━━━━━━━━━━━━━━━ 3s 103ms/step - accuracy: 0.9272 - auc: 0.9945 - loss: 1.2480 - weighted_f1: 0.9276 - val_accuracy: 0.9375 - val_auc: 0.9921 - val_loss: 1.3031 - val_weighted_f1: 0.9386 - learning_rate: 1.0000e-04
Epoch 20/25
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 57ms/step - accuracy: 0.9280 - auc: 0.9924 - loss: 1.2534 - weighted_f1: 0.9281 - val_accuracy: 0.9107 - val_auc: 0.9920 - val_loss: 1.2939 - val_weighted_f1: 0.9119 - learning_rate: 1.0000e-04
Epoch 21/25
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 57ms/step - accuracy: 0.9541 - auc: 0.9978 - loss: 1.2052 - weighted_f1: 0.9545 - val_accuracy: 0.9018 - val_auc: 0.9917 - val_loss: 1.2920 - val_weighted_f1: 0.9022 - learning_rate: 1.0000e-04
Epoch 22/25
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 51ms/step - accuracy: 0.9541 - auc: 0.9963 - loss: 1.1975 - weighted_f1: 0.9547 - val_accuracy: 0.9375 - val_auc: 0.9952 - val_loss: 1.2554 - val_weighted_f1: 0.9379 - learning_rate: 1.0000e-04
Epoch 23/25
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 54ms/step - accuracy: 0.9516 - auc: 0.9935 - loss: 1.1964 - weighted_f1: 0.9519 - val_accuracy: 0.9286 - val_auc: 0.9901 - val_loss: 1.2945 - val_weighted_f1: 0.9295 - learning_rate: 1.0000e-04
Epoch 24/25
28/29 ━━━━━━━━━━━━━━━━━━━━ 0s 48ms/step - accuracy: 0.8790 - auc: 0.9749 - loss: 1.2165 - weighted_f1: 0.8849WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
29/29 ━━━━━━━━━━━━━━━━━━━━ 3s 104ms/step - accuracy: 0.8825 - auc: 0.9760 - loss: 1.2143 - weighted_f1: 0.8880 - val_accuracy: 0.9464 - val_auc: 0.9942 - val_loss: 1.2431 - val_weighted_f1: 0.9467 - learning_rate: 1.0000e-04
Epoch 25/25
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 53ms/step - accuracy: 0.9372 - auc: 0.9916 - loss: 1.1691 - weighted_f1: 0.9388 - val_accuracy: 0.9464 - val_auc: 0.9899 - val_loss: 1.2556 - val_weighted_f1: 0.9466 - learning_rate: 1.0000e-04
Gradual stage results - Loss: 1.2431, Accuracy: 0.9464, AUC: 0.9942, Weighted F1: 0.9467
Stage 3: Full dataset training...
Epoch 1/50
28/29 ━━━━━━━━━━━━━━━━━━━━ 0s 48ms/step - accuracy: 0.9230 - auc: 0.9933 - loss: 1.1595 - weighted_f1: 0.9232WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
29/29 ━━━━━━━━━━━━━━━━━━━━ 36s 261ms/step - accuracy: 0.9228 - auc: 0.9933 - loss: 1.1603 - weighted_f1: 0.9230 - val_accuracy: 0.9464 - val_auc: 0.9926 - val_loss: 1.2336 - val_weighted_f1: 0.9466 - learning_rate: 5.0000e-05
Epoch 2/50
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 53ms/step - accuracy: 0.9560 - auc: 0.9965 - loss: 1.1455 - weighted_f1: 0.9562 - val_accuracy: 0.9464 - val_auc: 0.9914 - val_loss: 1.2293 - val_weighted_f1: 0.9464 - learning_rate: 5.0000e-05
Epoch 3/50
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 55ms/step - accuracy: 0.9565 - auc: 0.9963 - loss: 1.1246 - weighted_f1: 0.9564 - val_accuracy: 0.9196 - val_auc: 0.9922 - val_loss: 1.2175 - val_weighted_f1: 0.9201 - learning_rate: 5.0000e-05
Epoch 4/50
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 56ms/step - accuracy: 0.9617 - auc: 0.9937 - loss: 1.1326 - weighted_f1: 0.9614 - val_accuracy: 0.9375 - val_auc: 0.9931 - val_loss: 1.1970 - val_weighted_f1: 0.9378 - learning_rate: 5.0000e-05
Epoch 5/50
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 55ms/step - accuracy: 0.9554 - auc: 0.9971 - loss: 1.1011 - weighted_f1: 0.9551 - val_accuracy: 0.9196 - val_auc: 0.9921 - val_loss: 1.2029 - val_weighted_f1: 0.9203 - learning_rate: 5.0000e-05
Epoch 6/50
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 54ms/step - accuracy: 0.9501 - auc: 0.9968 - loss: 1.0931 - weighted_f1: 0.9499 - val_accuracy: 0.9196 - val_auc: 0.9913 - val_loss: 1.2082 - val_weighted_f1: 0.9203 - learning_rate: 5.0000e-05
Epoch 7/50
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 52ms/step - accuracy: 0.9577 - auc: 0.9955 - loss: 1.0885 - weighted_f1: 0.9579 - val_accuracy: 0.9018 - val_auc: 0.9925 - val_loss: 1.1963 - val_weighted_f1: 0.9028 - learning_rate: 5.0000e-05
Epoch 8/50
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 57ms/step - accuracy: 0.9646 - auc: 0.9975 - loss: 1.0710 - weighted_f1: 0.9649 - val_accuracy: 0.9196 - val_auc: 0.9936 - val_loss: 1.1824 - val_weighted_f1: 0.9203 - learning_rate: 5.0000e-05
Epoch 9/50
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 55ms/step - accuracy: 0.9716 - auc: 0.9981 - loss: 1.0619 - weighted_f1: 0.9716 - val_accuracy: 0.9375 - val_auc: 0.9931 - val_loss: 1.1533 - val_weighted_f1: 0.9378 - learning_rate: 5.0000e-05
Epoch 10/50
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 54ms/step - accuracy: 0.9662 - auc: 0.9967 - loss: 1.0587 - weighted_f1: 0.9668 - val_accuracy: 0.9375 - val_auc: 0.9935 - val_loss: 1.1442 - val_weighted_f1: 0.9378 - learning_rate: 5.0000e-05
Epoch 11/50
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 55ms/step - accuracy: 0.9833 - auc: 0.9988 - loss: 1.0448 - weighted_f1: 0.9833 - val_accuracy: 0.9286 - val_auc: 0.9918 - val_loss: 1.1462 - val_weighted_f1: 0.9291 - learning_rate: 5.0000e-05
Epoch 12/50
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 53ms/step - accuracy: 0.9705 - auc: 0.9989 - loss: 1.0383 - weighted_f1: 0.9707 - val_accuracy: 0.9196 - val_auc: 0.9918 - val_loss: 1.1378 - val_weighted_f1: 0.9202 - learning_rate: 5.0000e-05
Epoch 13/50
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 54ms/step - accuracy: 0.9775 - auc: 0.9990 - loss: 1.0241 - weighted_f1: 0.9778 - val_accuracy: 0.9286 - val_auc: 0.9928 - val_loss: 1.1233 - val_weighted_f1: 0.9291 - learning_rate: 5.0000e-05
Epoch 14/50
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 55ms/step - accuracy: 0.9769 - auc: 0.9986 - loss: 1.0214 - weighted_f1: 0.9768 - val_accuracy: 0.9196 - val_auc: 0.9928 - val_loss: 1.1240 - val_weighted_f1: 0.9202 - learning_rate: 2.5000e-05
Epoch 15/50
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 54ms/step - accuracy: 0.9707 - auc: 0.9981 - loss: 1.0161 - weighted_f1: 0.9708 - val_accuracy: 0.9196 - val_auc: 0.9923 - val_loss: 1.1280 - val_weighted_f1: 0.9201 - learning_rate: 2.5000e-05
Epoch 16/50
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 54ms/step - accuracy: 0.9810 - auc: 0.9995 - loss: 1.0014 - weighted_f1: 0.9811 - val_accuracy: 0.9286 - val_auc: 0.9928 - val_loss: 1.1178 - val_weighted_f1: 0.9291 - learning_rate: 2.5000e-05
Epoch 17/50
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 55ms/step - accuracy: 0.9509 - auc: 0.9951 - loss: 1.0349 - weighted_f1: 0.9510 - val_accuracy: 0.9196 - val_auc: 0.9935 - val_loss: 1.1004 - val_weighted_f1: 0.9203 - learning_rate: 2.5000e-05
Epoch 18/50
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 53ms/step - accuracy: 0.9571 - auc: 0.9963 - loss: 1.0805 - weighted_f1: 0.9573 - val_accuracy: 0.9107 - val_auc: 0.9921 - val_loss: 1.1020 - val_weighted_f1: 0.9110 - learning_rate: 2.5000e-05
Epoch 19/50
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 56ms/step - accuracy: 0.9821 - auc: 0.9977 - loss: 1.0023 - weighted_f1: 0.9822 - val_accuracy: 0.9286 - val_auc: 0.9919 - val_loss: 1.1055 - val_weighted_f1: 0.9290 - learning_rate: 2.5000e-05
Epoch 20/50
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 54ms/step - accuracy: 0.9634 - auc: 0.9977 - loss: 0.9938 - weighted_f1: 0.9645 - val_accuracy: 0.9286 - val_auc: 0.9920 - val_loss: 1.0964 - val_weighted_f1: 0.9290 - learning_rate: 2.5000e-05
Epoch 21/50
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 58ms/step - accuracy: 0.9673 - auc: 0.9974 - loss: 0.9925 - weighted_f1: 0.9683 - val_accuracy: 0.9286 - val_auc: 0.9919 - val_loss: 1.0930 - val_weighted_f1: 0.9290 - learning_rate: 2.5000e-05
Epoch 22/50
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 54ms/step - accuracy: 0.9587 - auc: 0.9979 - loss: 0.9839 - weighted_f1: 0.9593 - val_accuracy: 0.9286 - val_auc: 0.9920 - val_loss: 1.0862 - val_weighted_f1: 0.9290 - learning_rate: 2.5000e-05
Epoch 23/50
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 52ms/step - accuracy: 0.9751 - auc: 0.9983 - loss: 0.9856 - weighted_f1: 0.9750 - val_accuracy: 0.9286 - val_auc: 0.9920 - val_loss: 1.0868 - val_weighted_f1: 0.9290 - learning_rate: 2.5000e-05
Epoch 24/50
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 57ms/step - accuracy: 0.9721 - auc: 0.9968 - loss: 0.9937 - weighted_f1: 0.9731 - val_accuracy: 0.9196 - val_auc: 0.9925 - val_loss: 1.0816 - val_weighted_f1: 0.9202 - learning_rate: 2.5000e-05
Epoch 25/50
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 56ms/step - accuracy: 0.9745 - auc: 0.9991 - loss: 0.9690 - weighted_f1: 0.9747 - val_accuracy: 0.9107 - val_auc: 0.9924 - val_loss: 1.0803 - val_weighted_f1: 0.9115 - learning_rate: 2.5000e-05
Epoch 26/50
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 53ms/step - accuracy: 0.9843 - auc: 0.9995 - loss: 0.9599 - weighted_f1: 0.9843 - val_accuracy: 0.9196 - val_auc: 0.9928 - val_loss: 1.0772 - val_weighted_f1: 0.9202 - learning_rate: 1.2500e-05
Full stage results - Loss: 1.2336, Accuracy: 0.9464, AUC: 0.9926, Weighted F1: 0.9466
Final validation results for resnet50v2_enhanced_adaptive_smote:
  Loss: 1.2336
  Accuracy: 0.9464
  AUC: 0.9926
  Weighted F1: 0.9466

============================================================
Training model 3/3 with bayesian sampling
Model type: bayesian
============================================================
Sampling failed: With over-sampling methods, the number of samples in a class should be greater or equal to the original number of samples. Originally, there is 137 samples and 111 samples are asked., using original data
After bayesian: 472 samples
New distribution: [ 87 109 137 139]
Created STABLE Bayesian densenet model
Stage 1: Fully balanced training...
Epoch 1/25
/usr/local/lib/python3.11/dist-packages/keras/src/optimizers/base_optimizer.py:774: UserWarning: Gradients do not exist for variables ['stable_variational_dense/kernel_rho', 'stable_variational_dense/bias_rho', 'stable_variational_dense_1/kernel_rho', 'stable_variational_dense_1/bias_rho'] when minimizing the loss. If using `model.compile()`, did you forget to provide a `loss` argument?
  warnings.warn(
37/37 ━━━━━━━━━━━━━━━━━━━━ 0s 50ms/step - accuracy: 0.4976 - auc: 0.7450 - loss: 2.0016 - weighted_f1: 0.4928WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
37/37 ━━━━━━━━━━━━━━━━━━━━ 42s 400ms/step - accuracy: 0.5003 - auc: 0.7473 - loss: 1.9904 - weighted_f1: 0.4955 - val_accuracy: 0.7054 - val_auc: 0.8764 - val_loss: 1.3105 - val_weighted_f1: 0.6965 - learning_rate: 3.0000e-04
Epoch 2/25
37/37 ━━━━━━━━━━━━━━━━━━━━ 2s 57ms/step - accuracy: 0.7069 - auc: 0.9094 - loss: 1.0812 - weighted_f1: 0.6972 - val_accuracy: 0.6250 - val_auc: 0.8508 - val_loss: 1.2504 - val_weighted_f1: 0.5785 - learning_rate: 3.0000e-04
Epoch 3/25
37/37 ━━━━━━━━━━━━━━━━━━━━ 2s 58ms/step - accuracy: 0.7687 - auc: 0.9301 - loss: 0.8929 - weighted_f1: 0.7621 - val_accuracy: 0.6429 - val_auc: 0.8707 - val_loss: 1.1041 - val_weighted_f1: 0.5968 - learning_rate: 3.0000e-04
Epoch 4/25
37/37 ━━━━━━━━━━━━━━━━━━━━ 0s 52ms/step - accuracy: 0.7871 - auc: 0.9469 - loss: 0.7504 - weighted_f1: 0.7872WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
37/37 ━━━━━━━━━━━━━━━━━━━━ 3s 80ms/step - accuracy: 0.7875 - auc: 0.9470 - loss: 0.7486 - weighted_f1: 0.7875 - val_accuracy: 0.7411 - val_auc: 0.9108 - val_loss: 0.9106 - val_weighted_f1: 0.7353 - learning_rate: 3.0000e-04
Epoch 5/25
37/37 ━━━━━━━━━━━━━━━━━━━━ 2s 57ms/step - accuracy: 0.8360 - auc: 0.9649 - loss: 0.5068 - weighted_f1: 0.8336 - val_accuracy: 0.7321 - val_auc: 0.9268 - val_loss: 0.7549 - val_weighted_f1: 0.7062 - learning_rate: 3.0000e-04
Epoch 6/25
37/37 ━━━━━━━━━━━━━━━━━━━━ 2s 52ms/step - accuracy: 0.8403 - auc: 0.9627 - loss: 0.6894 - weighted_f1: 0.8381 - val_accuracy: 0.6964 - val_auc: 0.9137 - val_loss: 0.7173 - val_weighted_f1: 0.6649 - learning_rate: 3.0000e-04
Epoch 7/25
37/37 ━━━━━━━━━━━━━━━━━━━━ 2s 55ms/step - accuracy: 0.8396 - auc: 0.9724 - loss: 0.4531 - weighted_f1: 0.8366 - val_accuracy: 0.6786 - val_auc: 0.9121 - val_loss: 0.7375 - val_weighted_f1: 0.6711 - learning_rate: 3.0000e-04
Epoch 8/25
37/37 ━━━━━━━━━━━━━━━━━━━━ 0s 48ms/step - accuracy: 0.8743 - auc: 0.9712 - loss: 0.5135 - weighted_f1: 0.8730WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
37/37 ━━━━━━━━━━━━━━━━━━━━ 3s 77ms/step - accuracy: 0.8744 - auc: 0.9713 - loss: 0.5124 - weighted_f1: 0.8731 - val_accuracy: 0.7500 - val_auc: 0.9447 - val_loss: 0.5887 - val_weighted_f1: 0.7496 - learning_rate: 3.0000e-04
Epoch 9/25
37/37 ━━━━━━━━━━━━━━━━━━━━ 0s 50ms/step - accuracy: 0.8738 - auc: 0.9829 - loss: 0.3642 - weighted_f1: 0.8736WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
37/37 ━━━━━━━━━━━━━━━━━━━━ 3s 79ms/step - accuracy: 0.8740 - auc: 0.9828 - loss: 0.3651 - weighted_f1: 0.8738 - val_accuracy: 0.7857 - val_auc: 0.9403 - val_loss: 0.6279 - val_weighted_f1: 0.7825 - learning_rate: 3.0000e-04
Epoch 10/25
37/37 ━━━━━━━━━━━━━━━━━━━━ 0s 48ms/step - accuracy: 0.9011 - auc: 0.9807 - loss: 0.3624 - weighted_f1: 0.9007WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
37/37 ━━━━━━━━━━━━━━━━━━━━ 3s 76ms/step - accuracy: 0.9009 - auc: 0.9807 - loss: 0.3617 - weighted_f1: 0.9006 - val_accuracy: 0.8036 - val_auc: 0.9389 - val_loss: 0.7531 - val_weighted_f1: 0.8004 - learning_rate: 3.0000e-04
Epoch 11/25
37/37 ━━━━━━━━━━━━━━━━━━━━ 2s 55ms/step - accuracy: 0.8770 - auc: 0.9796 - loss: 0.3467 - weighted_f1: 0.8783 - val_accuracy: 0.7857 - val_auc: 0.9302 - val_loss: 0.8315 - val_weighted_f1: 0.7815 - learning_rate: 3.0000e-04
Epoch 12/25
37/37 ━━━━━━━━━━━━━━━━━━━━ 2s 53ms/step - accuracy: 0.8874 - auc: 0.9787 - loss: 0.3816 - weighted_f1: 0.8865 - val_accuracy: 0.7857 - val_auc: 0.9307 - val_loss: 0.8530 - val_weighted_f1: 0.7834 - learning_rate: 3.0000e-04
Epoch 13/25
37/37 ━━━━━━━━━━━━━━━━━━━━ 2s 54ms/step - accuracy: 0.9192 - auc: 0.9858 - loss: 0.3186 - weighted_f1: 0.9188 - val_accuracy: 0.7857 - val_auc: 0.9146 - val_loss: 1.0835 - val_weighted_f1: 0.7870 - learning_rate: 3.0000e-04
Epoch 14/25
37/37 ━━━━━━━━━━━━━━━━━━━━ 0s 48ms/step - accuracy: 0.9094 - auc: 0.9835 - loss: 0.3449 - weighted_f1: 0.9106WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
37/37 ━━━━━━━━━━━━━━━━━━━━ 3s 76ms/step - accuracy: 0.9094 - auc: 0.9834 - loss: 0.3454 - weighted_f1: 0.9105 - val_accuracy: 0.8036 - val_auc: 0.9332 - val_loss: 0.8258 - val_weighted_f1: 0.8036 - learning_rate: 3.0000e-04
Epoch 15/25
37/37 ━━━━━━━━━━━━━━━━━━━━ 2s 57ms/step - accuracy: 0.9182 - auc: 0.9879 - loss: 0.3455 - weighted_f1: 0.9191 - val_accuracy: 0.7857 - val_auc: 0.9441 - val_loss: 0.7203 - val_weighted_f1: 0.7881 - learning_rate: 3.0000e-04
Epoch 16/25
36/37 ━━━━━━━━━━━━━━━━━━━━ 0s 53ms/step - accuracy: 0.8844 - auc: 0.9854 - loss: 0.3955 - weighted_f1: 0.8847WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
37/37 ━━━━━━━━━━━━━━━━━━━━ 3s 81ms/step - accuracy: 0.8854 - auc: 0.9855 - loss: 0.3919 - weighted_f1: 0.8856 - val_accuracy: 0.8214 - val_auc: 0.9379 - val_loss: 0.8306 - val_weighted_f1: 0.8193 - learning_rate: 3.0000e-04
Epoch 17/25
37/37 ━━━━━━━━━━━━━━━━━━━━ 0s 54ms/step - accuracy: 0.9159 - auc: 0.9866 - loss: 0.3159 - weighted_f1: 0.9150WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
37/37 ━━━━━━━━━━━━━━━━━━━━ 3s 83ms/step - accuracy: 0.9154 - auc: 0.9864 - loss: 0.3168 - weighted_f1: 0.9144 - val_accuracy: 0.8571 - val_auc: 0.9453 - val_loss: 0.6879 - val_weighted_f1: 0.8574 - learning_rate: 3.0000e-04
Epoch 18/25
37/37 ━━━━━━━━━━━━━━━━━━━━ 2s 57ms/step - accuracy: 0.9263 - auc: 0.9917 - loss: 0.2416 - weighted_f1: 0.9260 - val_accuracy: 0.8304 - val_auc: 0.9461 - val_loss: 0.7264 - val_weighted_f1: 0.8296 - learning_rate: 3.0000e-04
Epoch 19/25
37/37 ━━━━━━━━━━━━━━━━━━━━ 2s 55ms/step - accuracy: 0.9335 - auc: 0.9929 - loss: 0.2435 - weighted_f1: 0.9339 - val_accuracy: 0.8304 - val_auc: 0.9244 - val_loss: 1.0716 - val_weighted_f1: 0.8308 - learning_rate: 3.0000e-04
Epoch 20/25
37/37 ━━━━━━━━━━━━━━━━━━━━ 2s 55ms/step - accuracy: 0.9386 - auc: 0.9952 - loss: 0.2007 - weighted_f1: 0.9387 - val_accuracy: 0.7500 - val_auc: 0.8937 - val_loss: 1.2784 - val_weighted_f1: 0.7353 - learning_rate: 3.0000e-04
Epoch 21/25
37/37 ━━━━━━━━━━━━━━━━━━━━ 2s 56ms/step - accuracy: 0.9184 - auc: 0.9887 - loss: 0.2805 - weighted_f1: 0.9183 - val_accuracy: 0.8125 - val_auc: 0.9415 - val_loss: 0.8371 - val_weighted_f1: 0.8122 - learning_rate: 3.0000e-04
Epoch 22/25
37/37 ━━━━━━━━━━━━━━━━━━━━ 2s 53ms/step - accuracy: 0.9403 - auc: 0.9941 - loss: 0.2017 - weighted_f1: 0.9400 - val_accuracy: 0.8571 - val_auc: 0.9379 - val_loss: 0.7220 - val_weighted_f1: 0.8565 - learning_rate: 3.0000e-04
Epoch 23/25
37/37 ━━━━━━━━━━━━━━━━━━━━ 2s 55ms/step - accuracy: 0.8984 - auc: 0.9847 - loss: 0.2823 - weighted_f1: 0.9001 - val_accuracy: 0.8304 - val_auc: 0.9319 - val_loss: 0.8182 - val_weighted_f1: 0.8280 - learning_rate: 3.0000e-04
Epoch 24/25
37/37 ━━━━━━━━━━━━━━━━━━━━ 2s 57ms/step - accuracy: 0.9337 - auc: 0.9945 - loss: 0.1893 - weighted_f1: 0.9338 - val_accuracy: 0.8482 - val_auc: 0.9416 - val_loss: 0.7987 - val_weighted_f1: 0.8472 - learning_rate: 3.0000e-04
Epoch 25/25
37/37 ━━━━━━━━━━━━━━━━━━━━ 2s 56ms/step - accuracy: 0.9436 - auc: 0.9930 - loss: 0.1769 - weighted_f1: 0.9431 - val_accuracy: 0.8214 - val_auc: 0.9541 - val_loss: 0.7510 - val_weighted_f1: 0.8218 - learning_rate: 3.0000e-04
Fully_balanced stage results - Loss: 0.6879, Accuracy: 0.8571, AUC: 0.9453, Weighted F1: 0.8574
Stage 2: Gradual imbalance introduction...
Epoch 1/25
28/29 ━━━━━━━━━━━━━━━━━━━━ 0s 46ms/step - accuracy: 0.8962 - auc: 0.9623 - loss: 0.6133 - weighted_f1: 0.8969WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
29/29 ━━━━━━━━━━━━━━━━━━━━ 41s 494ms/step - accuracy: 0.8947 - auc: 0.9626 - loss: 0.6077 - weighted_f1: 0.8953 - val_accuracy: 0.8661 - val_auc: 0.9484 - val_loss: 0.6698 - val_weighted_f1: 0.8651 - learning_rate: 1.0000e-04
Epoch 2/25
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 56ms/step - accuracy: 0.8819 - auc: 0.9798 - loss: 0.3103 - weighted_f1: 0.8808 - val_accuracy: 0.8571 - val_auc: 0.9600 - val_loss: 0.5920 - val_weighted_f1: 0.8559 - learning_rate: 1.0000e-04
Epoch 3/25
29/29 ━━━━━━━━━━━━━━━━━━━━ 0s 50ms/step - accuracy: 0.8832 - auc: 0.9854 - loss: 0.2834 - weighted_f1: 0.8815WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
29/29 ━━━━━━━━━━━━━━━━━━━━ 3s 89ms/step - accuracy: 0.8839 - auc: 0.9854 - loss: 0.2825 - weighted_f1: 0.8823 - val_accuracy: 0.8750 - val_auc: 0.9596 - val_loss: 0.5424 - val_weighted_f1: 0.8740 - learning_rate: 1.0000e-04
Epoch 4/25
29/29 ━━━━━━━━━━━━━━━━━━━━ 0s 50ms/step - accuracy: 0.8818 - auc: 0.9803 - loss: 0.3423 - weighted_f1: 0.8850WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
29/29 ━━━━━━━━━━━━━━━━━━━━ 3s 87ms/step - accuracy: 0.8823 - auc: 0.9805 - loss: 0.3412 - weighted_f1: 0.8855 - val_accuracy: 0.8839 - val_auc: 0.9563 - val_loss: 0.5429 - val_weighted_f1: 0.8835 - learning_rate: 1.0000e-04
Epoch 5/25
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 60ms/step - accuracy: 0.9152 - auc: 0.9897 - loss: 0.2735 - weighted_f1: 0.9148 - val_accuracy: 0.8661 - val_auc: 0.9572 - val_loss: 0.5628 - val_weighted_f1: 0.8658 - learning_rate: 1.0000e-04
Epoch 6/25
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 54ms/step - accuracy: 0.9494 - auc: 0.9914 - loss: 0.2316 - weighted_f1: 0.9493 - val_accuracy: 0.8661 - val_auc: 0.9606 - val_loss: 0.5378 - val_weighted_f1: 0.8659 - learning_rate: 1.0000e-04
Epoch 7/25
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 57ms/step - accuracy: 0.9145 - auc: 0.9882 - loss: 0.3158 - weighted_f1: 0.9143 - val_accuracy: 0.8750 - val_auc: 0.9673 - val_loss: 0.4752 - val_weighted_f1: 0.8748 - learning_rate: 1.0000e-04
Epoch 8/25
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 57ms/step - accuracy: 0.9290 - auc: 0.9937 - loss: 0.1831 - weighted_f1: 0.9288 - val_accuracy: 0.8571 - val_auc: 0.9679 - val_loss: 0.4590 - val_weighted_f1: 0.8566 - learning_rate: 1.0000e-04
Epoch 9/25
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 58ms/step - accuracy: 0.9110 - auc: 0.9859 - loss: 0.2663 - weighted_f1: 0.9120 - val_accuracy: 0.8750 - val_auc: 0.9643 - val_loss: 0.4803 - val_weighted_f1: 0.8748 - learning_rate: 1.0000e-04
Epoch 10/25
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 56ms/step - accuracy: 0.9510 - auc: 0.9913 - loss: 0.1818 - weighted_f1: 0.9517 - val_accuracy: 0.8839 - val_auc: 0.9616 - val_loss: 0.5019 - val_weighted_f1: 0.8830 - learning_rate: 1.0000e-04
Epoch 11/25
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 55ms/step - accuracy: 0.9379 - auc: 0.9913 - loss: 0.2288 - weighted_f1: 0.9380 - val_accuracy: 0.8571 - val_auc: 0.9518 - val_loss: 0.6106 - val_weighted_f1: 0.8551 - learning_rate: 1.0000e-04
Epoch 12/25
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 55ms/step - accuracy: 0.9327 - auc: 0.9930 - loss: 0.2391 - weighted_f1: 0.9330 - val_accuracy: 0.8571 - val_auc: 0.9495 - val_loss: 0.6526 - val_weighted_f1: 0.8551 - learning_rate: 1.0000e-04
Epoch 13/25
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 58ms/step - accuracy: 0.9147 - auc: 0.9925 - loss: 0.2317 - weighted_f1: 0.9141 - val_accuracy: 0.8750 - val_auc: 0.9490 - val_loss: 0.6595 - val_weighted_f1: 0.8745 - learning_rate: 1.0000e-04
Epoch 14/25
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 57ms/step - accuracy: 0.9404 - auc: 0.9906 - loss: 0.2267 - weighted_f1: 0.9401 - val_accuracy: 0.8750 - val_auc: 0.9674 - val_loss: 0.5228 - val_weighted_f1: 0.8745 - learning_rate: 1.0000e-04
Epoch 15/25
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 55ms/step - accuracy: 0.9430 - auc: 0.9948 - loss: 0.1716 - weighted_f1: 0.9428 - val_accuracy: 0.8750 - val_auc: 0.9617 - val_loss: 0.5277 - val_weighted_f1: 0.8752 - learning_rate: 1.0000e-04
Epoch 16/25
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 60ms/step - accuracy: 0.9078 - auc: 0.9928 - loss: 0.2362 - weighted_f1: 0.9088 - val_accuracy: 0.8839 - val_auc: 0.9649 - val_loss: 0.4839 - val_weighted_f1: 0.8834 - learning_rate: 1.0000e-04
Epoch 17/25
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 54ms/step - accuracy: 0.9243 - auc: 0.9945 - loss: 0.1760 - weighted_f1: 0.9251 - val_accuracy: 0.8661 - val_auc: 0.9700 - val_loss: 0.4568 - val_weighted_f1: 0.8658 - learning_rate: 5.0000e-05
Epoch 18/25
29/29 ━━━━━━━━━━━━━━━━━━━━ 0s 49ms/step - accuracy: 0.9334 - auc: 0.9913 - loss: 0.2484 - weighted_f1: 0.9329WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
29/29 ━━━━━━━━━━━━━━━━━━━━ 3s 86ms/step - accuracy: 0.9336 - auc: 0.9913 - loss: 0.2478 - weighted_f1: 0.9330 - val_accuracy: 0.8839 - val_auc: 0.9681 - val_loss: 0.5114 - val_weighted_f1: 0.8840 - learning_rate: 5.0000e-05
Epoch 19/25
29/29 ━━━━━━━━━━━━━━━━━━━━ 0s 48ms/step - accuracy: 0.9252 - auc: 0.9872 - loss: 0.2472 - weighted_f1: 0.9249WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 85ms/step - accuracy: 0.9253 - auc: 0.9872 - loss: 0.2462 - weighted_f1: 0.9250 - val_accuracy: 0.8839 - val_auc: 0.9714 - val_loss: 0.4815 - val_weighted_f1: 0.8841 - learning_rate: 5.0000e-05
Epoch 20/25
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 57ms/step - accuracy: 0.9441 - auc: 0.9866 - loss: 0.2774 - weighted_f1: 0.9444 - val_accuracy: 0.8839 - val_auc: 0.9706 - val_loss: 0.4718 - val_weighted_f1: 0.8830 - learning_rate: 5.0000e-05
Epoch 21/25
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 59ms/step - accuracy: 0.9349 - auc: 0.9878 - loss: 0.2271 - weighted_f1: 0.9349 - val_accuracy: 0.8839 - val_auc: 0.9728 - val_loss: 0.4212 - val_weighted_f1: 0.8830 - learning_rate: 5.0000e-05
Epoch 22/25
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 57ms/step - accuracy: 0.9525 - auc: 0.9972 - loss: 0.1374 - weighted_f1: 0.9523 - val_accuracy: 0.8839 - val_auc: 0.9757 - val_loss: 0.4252 - val_weighted_f1: 0.8830 - learning_rate: 5.0000e-05
Epoch 23/25
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 57ms/step - accuracy: 0.9509 - auc: 0.9938 - loss: 0.1817 - weighted_f1: 0.9514 - val_accuracy: 0.8750 - val_auc: 0.9758 - val_loss: 0.4437 - val_weighted_f1: 0.8737 - learning_rate: 5.0000e-05
Epoch 24/25
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 55ms/step - accuracy: 0.9360 - auc: 0.9922 - loss: 0.1966 - weighted_f1: 0.9361 - val_accuracy: 0.8839 - val_auc: 0.9714 - val_loss: 0.4604 - val_weighted_f1: 0.8829 - learning_rate: 5.0000e-05
Epoch 25/25
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 56ms/step - accuracy: 0.9217 - auc: 0.9910 - loss: 0.2112 - weighted_f1: 0.9214 - val_accuracy: 0.8839 - val_auc: 0.9671 - val_loss: 0.4798 - val_weighted_f1: 0.8837 - learning_rate: 5.0000e-05
Gradual stage results - Loss: 0.4815, Accuracy: 0.8839, AUC: 0.9714, Weighted F1: 0.8841
Stage 3: Full dataset training...
Epoch 1/50
28/29 ━━━━━━━━━━━━━━━━━━━━ 0s 49ms/step - accuracy: 0.9219 - auc: 0.9910 - loss: 0.2625 - weighted_f1: 0.9244WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
29/29 ━━━━━━━━━━━━━━━━━━━━ 40s 456ms/step - accuracy: 0.9227 - auc: 0.9911 - loss: 0.2595 - weighted_f1: 0.9250 - val_accuracy: 0.9018 - val_auc: 0.9673 - val_loss: 0.5048 - val_weighted_f1: 0.9018 - learning_rate: 5.0000e-05
Epoch 2/50
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 58ms/step - accuracy: 0.9283 - auc: 0.9954 - loss: 0.1626 - weighted_f1: 0.9285 - val_accuracy: 0.9018 - val_auc: 0.9615 - val_loss: 0.4995 - val_weighted_f1: 0.9018 - learning_rate: 5.0000e-05
Epoch 3/50
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 56ms/step - accuracy: 0.9343 - auc: 0.9946 - loss: 0.1861 - weighted_f1: 0.9342 - val_accuracy: 0.8750 - val_auc: 0.9614 - val_loss: 0.5168 - val_weighted_f1: 0.8748 - learning_rate: 5.0000e-05
Epoch 4/50
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 56ms/step - accuracy: 0.9325 - auc: 0.9951 - loss: 0.1872 - weighted_f1: 0.9331 - val_accuracy: 0.8929 - val_auc: 0.9720 - val_loss: 0.4478 - val_weighted_f1: 0.8927 - learning_rate: 5.0000e-05
Epoch 5/50
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 57ms/step - accuracy: 0.9346 - auc: 0.9939 - loss: 0.1822 - weighted_f1: 0.9351 - val_accuracy: 0.8839 - val_auc: 0.9700 - val_loss: 0.4741 - val_weighted_f1: 0.8837 - learning_rate: 5.0000e-05
Epoch 6/50
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 59ms/step - accuracy: 0.9440 - auc: 0.9940 - loss: 0.2005 - weighted_f1: 0.9443 - val_accuracy: 0.9018 - val_auc: 0.9719 - val_loss: 0.4449 - val_weighted_f1: 0.9017 - learning_rate: 5.0000e-05
Epoch 7/50
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 56ms/step - accuracy: 0.9396 - auc: 0.9953 - loss: 0.1603 - weighted_f1: 0.9395 - val_accuracy: 0.8929 - val_auc: 0.9669 - val_loss: 0.4723 - val_weighted_f1: 0.8927 - learning_rate: 5.0000e-05
Epoch 8/50
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 60ms/step - accuracy: 0.9564 - auc: 0.9958 - loss: 0.1411 - weighted_f1: 0.9567 - val_accuracy: 0.8929 - val_auc: 0.9668 - val_loss: 0.4966 - val_weighted_f1: 0.8927 - learning_rate: 5.0000e-05
Epoch 9/50
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 54ms/step - accuracy: 0.9576 - auc: 0.9960 - loss: 0.1439 - weighted_f1: 0.9578 - val_accuracy: 0.8929 - val_auc: 0.9602 - val_loss: 0.5558 - val_weighted_f1: 0.8927 - learning_rate: 5.0000e-05
Epoch 10/50
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 59ms/step - accuracy: 0.9546 - auc: 0.9936 - loss: 0.1513 - weighted_f1: 0.9546 - val_accuracy: 0.8929 - val_auc: 0.9612 - val_loss: 0.5320 - val_weighted_f1: 0.8927 - learning_rate: 5.0000e-05
Epoch 11/50
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 60ms/step - accuracy: 0.9665 - auc: 0.9976 - loss: 0.1161 - weighted_f1: 0.9664 - val_accuracy: 0.8929 - val_auc: 0.9670 - val_loss: 0.5136 - val_weighted_f1: 0.8927 - learning_rate: 5.0000e-05
Epoch 12/50
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 54ms/step - accuracy: 0.9442 - auc: 0.9925 - loss: 0.2017 - weighted_f1: 0.9442 - val_accuracy: 0.8929 - val_auc: 0.9679 - val_loss: 0.4861 - val_weighted_f1: 0.8927 - learning_rate: 5.0000e-05
Epoch 13/50
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 55ms/step - accuracy: 0.9024 - auc: 0.9832 - loss: 0.4135 - weighted_f1: 0.9022 - val_accuracy: 0.9018 - val_auc: 0.9671 - val_loss: 0.4953 - val_weighted_f1: 0.9017 - learning_rate: 5.0000e-05
Epoch 14/50
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 58ms/step - accuracy: 0.9520 - auc: 0.9962 - loss: 0.1184 - weighted_f1: 0.9518 - val_accuracy: 0.9018 - val_auc: 0.9679 - val_loss: 0.4728 - val_weighted_f1: 0.9017 - learning_rate: 2.5000e-05
Epoch 15/50
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 59ms/step - accuracy: 0.9614 - auc: 0.9982 - loss: 0.1176 - weighted_f1: 0.9615 - val_accuracy: 0.9018 - val_auc: 0.9676 - val_loss: 0.4783 - val_weighted_f1: 0.9017 - learning_rate: 2.5000e-05
Epoch 16/50
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 57ms/step - accuracy: 0.9340 - auc: 0.9872 - loss: 0.2147 - weighted_f1: 0.9338 - val_accuracy: 0.9018 - val_auc: 0.9676 - val_loss: 0.4891 - val_weighted_f1: 0.9017 - learning_rate: 2.5000e-05
Epoch 17/50
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 55ms/step - accuracy: 0.9569 - auc: 0.9976 - loss: 0.1221 - weighted_f1: 0.9574 - val_accuracy: 0.9018 - val_auc: 0.9679 - val_loss: 0.4973 - val_weighted_f1: 0.9017 - learning_rate: 2.5000e-05
Epoch 18/50
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 59ms/step - accuracy: 0.9359 - auc: 0.9907 - loss: 0.2575 - weighted_f1: 0.9363 - val_accuracy: 0.9018 - val_auc: 0.9678 - val_loss: 0.4951 - val_weighted_f1: 0.9017 - learning_rate: 2.5000e-05
Epoch 19/50
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 56ms/step - accuracy: 0.9558 - auc: 0.9968 - loss: 0.1445 - weighted_f1: 0.9558 - val_accuracy: 0.9018 - val_auc: 0.9667 - val_loss: 0.4994 - val_weighted_f1: 0.9017 - learning_rate: 2.5000e-05
Epoch 20/50
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 54ms/step - accuracy: 0.9619 - auc: 0.9974 - loss: 0.1566 - weighted_f1: 0.9619 - val_accuracy: 0.9018 - val_auc: 0.9684 - val_loss: 0.4919 - val_weighted_f1: 0.9017 - learning_rate: 2.5000e-05
Epoch 21/50
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 57ms/step - accuracy: 0.9576 - auc: 0.9966 - loss: 0.1612 - weighted_f1: 0.9574 - val_accuracy: 0.9018 - val_auc: 0.9673 - val_loss: 0.5003 - val_weighted_f1: 0.9017 - learning_rate: 2.5000e-05
Epoch 22/50
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 57ms/step - accuracy: 0.9514 - auc: 0.9965 - loss: 0.1242 - weighted_f1: 0.9513 - val_accuracy: 0.9018 - val_auc: 0.9680 - val_loss: 0.4953 - val_weighted_f1: 0.9017 - learning_rate: 2.5000e-05
Epoch 23/50
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 56ms/step - accuracy: 0.9428 - auc: 0.9916 - loss: 0.1887 - weighted_f1: 0.9429 - val_accuracy: 0.9018 - val_auc: 0.9671 - val_loss: 0.5032 - val_weighted_f1: 0.9017 - learning_rate: 2.5000e-05
Epoch 24/50
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 57ms/step - accuracy: 0.9577 - auc: 0.9961 - loss: 0.1363 - weighted_f1: 0.9578 - val_accuracy: 0.9018 - val_auc: 0.9688 - val_loss: 0.4689 - val_weighted_f1: 0.9017 - learning_rate: 2.5000e-05
Epoch 25/50
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 54ms/step - accuracy: 0.9747 - auc: 0.9964 - loss: 0.0981 - weighted_f1: 0.9748 - val_accuracy: 0.9018 - val_auc: 0.9693 - val_loss: 0.4663 - val_weighted_f1: 0.9017 - learning_rate: 2.5000e-05
Epoch 26/50
29/29 ━━━━━━━━━━━━━━━━━━━━ 2s 55ms/step - accuracy: 0.9538 - auc: 0.9938 - loss: 0.1627 - weighted_f1: 0.9536 - val_accuracy: 0.9018 - val_auc: 0.9697 - val_loss: 0.4677 - val_weighted_f1: 0.9017 - learning_rate: 1.2500e-05
Full stage results - Loss: 0.5048, Accuracy: 0.9018, AUC: 0.9673, Weighted F1: 0.9018
Final validation results for densenet_stable_bayesian_bayesian:
  Loss: 0.5048
  Accuracy: 0.9018
  AUC: 0.9673
  Weighted F1: 0.9018

============================================================
ENHANCED ENSEMBLE EVALUATION WITH TTA AND UNCERTAINTY
============================================================
Getting predictions from densenet_enhanced_mega_smote...
Getting predictions from resnet50v2_enhanced_adaptive_smote...
Getting predictions from densenet_stable_bayesian_bayesian...



## Key Results

### Model Performance Summary

| Model | Accuracy | Weighted F1 | AUC | Best Validation Score |
|-------|----------|-------------|-----|-----------------------|
| DenseNet121 + MEGA-SMOTE | 92.86% | 0.9288 | 0.9898 | 92.86% (val) |
| ResNet50V2 + Adaptive-SMOTE | 94.64% | 0.9466 | 0.9926 | 94.64% (val) |
| Bayesian DenseNet121 | 90.18% | 0.9018 | 0.9673 | 90.18% (val) |
| **Ensemble** | **93.24%** | **0.9324** | **0.9915** | - |

### Class Distribution Analysis

- Original dataset: 1000 images across 7 classes
- Focused on top 4 classes:
  - `adenocarcinoma_left.lower.lobe_T2_N0_M0_Ib`: 218 samples
  - `large.cell.carcinoma_left.hilum_T2_N2_M0_IIIa`: 136 samples
  - `normal`: 215 samples
  - `squamous.cell.carcinoma_left.hilum_T1_N2_M0_IIIa`: 170 samples

### Training Highlights

- Achieved >90% accuracy on all models despite severe class imbalance
- Bayesian model showed excellent calibration with 90.18% accuracy
- ResNet50V2 with Adaptive-SMOTE performed best (94.64% accuracy)
- Ensemble approach combined strengths of all models

